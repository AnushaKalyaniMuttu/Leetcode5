import java.util.*;

class Solution {
    public int cutOffTree(List<List<Integer>> forest) {
        int m = forest.size(), n = forest.get(0).size();
        List<int[]> trees = new ArrayList<>();

        // Collect tree positions sorted by height
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (forest.get(i).get(j) > 1) {
                    trees.add(new int[]{forest.get(i).get(j), i, j});
                }
            }
        }
        Collections.sort(trees, Comparator.comparingInt(a -> a[0]));

        int totalSteps = 0, startX = 0, startY = 0;
        for (int[] tree : trees) {
            int steps = bfs(forest, startX, startY, tree[1], tree[2]);
            if (steps == -1) return -1; // If a tree is unreachable
            totalSteps += steps;
            startX = tree[1];
            startY = tree[2];
        }

        return totalSteps;
    }

    private int bfs(List<List<Integer>> forest, int sx, int sy, int tx, int ty) {
        if (sx == tx && sy == ty) return 0;

        int m = forest.size(), n = forest.get(0).size();
        int[][] directions = {{0,1}, {0,-1}, {1,0}, {-1,0}};
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[m][n];

        queue.offer(new int[]{sx, sy, 0});
        visited[sx][sy] = true;

        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            for (int[] dir : directions) {
                int nx = cur[0] + dir[0], ny = cur[1] + dir[1];
                if (nx >= 0 && ny >= 0 && nx < m && ny < n && !visited[nx][ny] && forest.get(nx).get(ny) > 0) {
                    if (nx == tx && ny == ty) return cur[2] + 1;
                    queue.offer(new int[]{nx, ny, cur[2] + 1});
                    visited[nx][ny] = true;
                }
            }
        }

        return -1; // Target tree is unreachable
    }
}
