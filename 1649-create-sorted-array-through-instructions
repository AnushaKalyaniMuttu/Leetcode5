class Solution {
    private static final int MOD = 1_000_000_007;

    public int createSortedArray(int[] instructions) {
        int maxVal = 0;
        for (int x : instructions) {
            if (x > maxVal) maxVal = x;
        }

        FenwickTree bit = new FenwickTree(maxVal + 2);
        long cost = 0;
        int count = 0;

        for (int x : instructions) {
            int left = bit.query(x - 1);      // numbers < x
            int right = count - bit.query(x); // numbers > x
            cost += Math.min(left, right);
            cost %= MOD;

            bit.update(x, 1);
            count++;
        }

        return (int) cost;
    }

    // Fenwick Tree (Binary Indexed Tree)
    static class FenwickTree {
        private int[] tree;
        private int n;

        FenwickTree(int n) {
            this.n = n;
            this.tree = new int[n + 1];
        }

        void update(int idx, int delta) {
            while (idx <= n) {
                tree[idx] += delta;
                idx += idx & -idx;
            }
        }

        int query(int idx) {
            int sum = 0;
            while (idx > 0) {
                sum += tree[idx];
                idx -= idx & -idx;
            }
            return sum;
        }
    }
}
