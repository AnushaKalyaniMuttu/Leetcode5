import java.util.ArrayDeque;
import java.util.Queue;

public class Solution {
    private static final int[][] DIRECTIONS = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    
    public int shortestBridge(int[][] grid) {
        int n = grid.length;
        boolean[][] visited = new boolean[n][n];
        Queue<int[]> queue = new ArrayDeque<>();
        
        // Step 1: Find and mark the first island using DFS
        outerLoop:
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    dfs(grid, visited, i, j, queue);
                    break outerLoop;
                }
            }
        }
        
        // Step 2: Expand from the first island using BFS to find the shortest bridge
        int level = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size-- > 0) {
                int[] cell = queue.poll();
                for (int[] dir : DIRECTIONS) {
                    int x = cell[0] + dir[0];
                    int y = cell[1] + dir[1];
                    if (x >= 0 && x < n && y >= 0 && y < n && !visited[x][y]) {
                        if (grid[x][y] == 1) {
                            return level;
                        }
                        visited[x][y] = true;
                        queue.offer(new int[]{x, y});
                    }
                }
            }
            level++;
        }
        
        return -1; // Should never reach here if the input is valid
    }
    
    private void dfs(int[][] grid, boolean[][] visited, int x, int y, Queue<int[]> queue) {
        int n = grid.length;
        visited[x][y] = true;
        queue.offer(new int[]{x, y});
        for (int[] dir : DIRECTIONS) {
            int newX = x + dir[0];
            int newY = y + dir[1];
            if (newX >= 0 && newX < n && newY >= 0 && newY < n && !visited[newX][newY] && grid[newX][newY] == 1) {
                dfs(grid, visited, newX, newY, queue);
            }
        }
    }
}
