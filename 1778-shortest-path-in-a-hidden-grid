class Solution {
    // Directions: up, down, left, right
    private final int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};
    
    public int shortestPath(GridMaster master) {
        Map<String, Boolean> visited = new HashMap<>();
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0, 0}); // {x, y, steps}
        visited.put("0,0", true);
        
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0], y = cur[1], steps = cur[2];
            
            if (master.isTarget()) return steps;
            
            for (int[] dir : dirs) {
                int nx = x + dir[0], ny = y + dir[1];
                String key = nx + "," + ny;
                
                if (!visited.containsKey(key) && master.canMove(dirToString(dir))) {
                    visited.put(key, true);
                    master.move(dirToString(dir));
                    queue.offer(new int[]{nx, ny, steps + 1});
                    master.move(dirToString(new int[]{-dir[0], -dir[1]})); // move back
                }
            }
        }
        return -1;
    }
    
    private String dirToString(int[] dir) {
        if (dir[0] == -1) return "U";
        if (dir[0] == 1) return "D";
        if (dir[1] == -1) return "L";
        return "R";
    }
}
