import java.util.*;

class Solution {
    public int minDistance(int[] houses, int k) {
        Arrays.sort(houses);
        int n = houses.length;
        int[][] cost = new int[n][n];
        
        // Precompute cost of placing one mailbox from i to j
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int mid = (i + j) / 2;
                for (int x = i; x <= j; x++) {
                    cost[i][j] += Math.abs(houses[x] - houses[mid]);
                }
            }
        }
        
        int[][] dp = new int[n][k + 1];
        for (int[] row : dp) Arrays.fill(row, Integer.MAX_VALUE / 2);
        
        // Base case: only one mailbox for houses[0..i]
        for (int i = 0; i < n; i++) {
            dp[i][1] = cost[0][i];
        }
        
        for (int i = 0; i < n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int p = 0; p < i; p++) {
                    dp[i][j] = Math.min(dp[i][j], dp[p][j - 1] + cost[p + 1][i]);
                }
            }
        }
        
        return dp[n - 1][k];
    }
}
