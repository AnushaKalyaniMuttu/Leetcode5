class Solution {
    public int minEatingSpeed(int[] piles, int H) {
        int left = 1, right = Integer.MAX_VALUE / 2;
        int result = right;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canFinish(piles, mid, H)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return result;
    }

    private boolean canFinish(int[] piles, int speed, int H) {
        int hours = 0;
        for (int pile : piles) {
            hours += (pile + speed - 1) / speed; // Calculate required hours to finish this pile
            if (hours > H) return false; // If we exceed the limit, return false
        }
        return true;
    }
}
