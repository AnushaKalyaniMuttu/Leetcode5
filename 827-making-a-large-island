import java.util.*;

class Solution {
    private int n;
    private int[][] grid;
    private final int[][] directions = {{0,1},{1,0},{-1,0},{0,-1}};

    public int largestIsland(int[][] grid) {
        this.grid = grid;
        this.n = grid.length;
        int islandId = 2;
        Map<Integer, Integer> areaMap = new HashMap<>();

        // First pass: label each island with an ID and record its area
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    int area = dfs(i, j, islandId);
                    areaMap.put(islandId++, area);
                }
            }
        }

        int maxArea = areaMap.values().stream().max(Integer::compare).orElse(0);

        // Second pass: try flipping each 0 to 1
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) {
                    Set<Integer> seen = new HashSet<>();
                    int area = 1; // include the flipped cell

                    for (int[] dir : directions) {
                        int ni = i + dir[0], nj = j + dir[1];
                        if (ni >= 0 && ni < n && nj >= 0 && nj < n) {
                            int id = grid[ni][nj];
                            if (id > 1 && seen.add(id)) {
                                area += areaMap.get(id);
                            }
                        }
                    }
                    maxArea = Math.max(maxArea, area);
                }
            }
        }

        return maxArea == 0 ? n * n : maxArea;
    }

    private int dfs(int i, int j, int islandId) {
        if (i < 0 || i >= n || j < 0 || j >= n || grid[i][j] != 1) return 0;
        grid[i][j] = islandId;
        int area = 1;
        for (int[] dir : directions) {
            area += dfs(i + dir[0], j + dir[1], islandId);
        }
        return area;
    }
}
