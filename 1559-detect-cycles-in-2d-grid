class Solution {
    private int rows, cols;
    private boolean[][] visited;
    private int[] dx = {-1, 0, 1, 0};
    private int[] dy = {0, 1, 0, -1};

    public boolean containsCycle(char[][] grid) {
        rows = grid.length;
        cols = grid[0].length;
        visited = new boolean[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (!visited[i][j]) {
                    if (dfs(grid, i, j, -1, -1, grid[i][j])) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    private boolean dfs(char[][] grid, int x, int y, int fromX, int fromY, char color) {
        visited[x][y] = true;

        for (int dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
            int ny = y + dy[dir];

            // skip out-of-bounds
            if (nx < 0 || ny < 0 || nx >= rows || ny >= cols) continue;

            // skip different characters
            if (grid[nx][ny] != color) continue;

            // skip the cell we just came from
            if (nx == fromX && ny == fromY) continue;

            if (visited[nx][ny]) {
                // found a cycle
                return true;
            }

            if (dfs(grid, nx, ny, x, y, color)) return true;
        }

        return false;
    }
}
