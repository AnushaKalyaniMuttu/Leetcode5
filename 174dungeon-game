class Solution {
   public int calculateMinimumHP(int[][] dungeon) {
        int m = dungeon.length;
        int n = dungeon[0].length;
        
        // dp[i][j] represents the minimum health needed to reach the princess from position (i, j)
        int[][] dp = new int[m + 1][n + 1];
        
        // Initialize the dp table, bottom-right corner is already initialized to a high value
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        
        // The princess's cell (m-1, n-1) needs at least 1 health to survive
        dp[m][n - 1] = dp[m - 1][n] = 1;

        // Start from the bottom-right and fill the dp table
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                int minHealthRequired = Math.min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j];
                dp[i][j] = Math.max(minHealthRequired, 1);
            }
        }
        
        // The minimum health required to start from the top-left corner (0, 0)
        return dp[0][0];
    }
}
