class Solution {
    public int minCut(String s) {
        int n = s.length();
        // dp[i] represents the minimum cuts required for s[0...i]
        int[] dp = new int[n];
        // isPalindrome[i][j] represents whether the substring s[i...j] is a palindrome
        boolean[][] isPalindrome = new boolean[n][n];

        // Initialize dp array where dp[i] is at most i (worst case all single chars)
        for (int i = 0; i < n; i++) {
            dp[i] = i;  // Maximum cuts are i (i.e., every character is its own palindrome)
        }

        // Fill the palindrome table
        for (int j = 0; j < n; j++) {
            for (int i = 0; i <= j; i++) {
                if (s.charAt(i) == s.charAt(j) && (j - i <= 2 || isPalindrome[i+1][j-1])) {
                    isPalindrome[i][j] = true;
                }
            }
        }

        // Now, calculate the minimum cuts using the palindrome table
        for (int j = 1; j < n; j++) {
            if (isPalindrome[0][j]) {
                dp[j] = 0;
            } else {
                for (int i = 1; i <= j; i++) {
                    if (isPalindrome[i][j]) {
                        dp[j] = Math.min(dp[j], dp[i-1] + 1);
                    }
                }
            }
        }

        return dp[n - 1];
    }
}
