import java.util.*;

public class Solution {
    public int maximumMinimumPath(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        boolean[][] seen = new boolean[m][n];
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a, b) -> Integer.compare(b[2], a[2]));
        maxHeap.offer(new int[]{0, 0, grid[0][0]});
        seen[0][0] = true;
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int ans = grid[0][0];

        while (!maxHeap.isEmpty()) {
            int[] curr = maxHeap.poll();
            int i = curr[0], j = curr[1], val = curr[2];
            ans = Math.min(ans, val);
            if (i == m - 1 && j == n - 1) return ans;
            for (int[] dir : dirs) {
                int x = i + dir[0], y = j + dir[1];
                if (x < 0 || x >= m || y < 0 || y >= n || seen[x][y]) continue;
                seen[x][y] = true;
                maxHeap.offer(new int[]{x, y, grid[x][y]});
            }
        }
        return -1;
    }
}
