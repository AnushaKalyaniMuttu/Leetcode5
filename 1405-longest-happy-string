import java.util.*;

public class Solution {
    public String longestDiverseString(int a, int b, int c) {
        PriorityQueue<Letter> pq = new PriorityQueue<>((l1, l2) -> l2.count - l1.count);
        if (a > 0) pq.offer(new Letter('a', a));
        if (b > 0) pq.offer(new Letter('b', b));
        if (c > 0) pq.offer(new Letter('c', c));
        
        StringBuilder sb = new StringBuilder();
        
        while (!pq.isEmpty()) {
            Letter first = pq.poll();
            int len = sb.length();
            // Check if the last two characters are the same as the current one
            if (len >= 2 && sb.charAt(len - 1) == first.ch && sb.charAt(len - 2) == first.ch) {
                if (pq.isEmpty()) break; // Can't place another char â†’ break
                Letter second = pq.poll();
                sb.append(second.ch);
                second.count--;
                if (second.count > 0) pq.offer(second);
                pq.offer(first); // put the skipped one back
            } else {
                sb.append(first.ch);
                first.count--;
                if (first.count > 0) pq.offer(first);
            }
        }
        
        return sb.toString();
    }

    static class Letter {
        char ch;
        int count;
        
        Letter(char ch, int count) {
            this.ch = ch;
            this.count = count;
        }
    }
}
