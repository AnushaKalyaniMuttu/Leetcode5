/**
 * Definition for Node (original):
 * public class Node {
 *     int val;
 *     Node left;
 *     Node right;
 *     Node random;
 *     Node() {}
 *     Node(int val) { this.val = val; }
 *     Node(int val, Node left, Node right, Node random) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *         this.random = random;
 *     }
 * }
 *
 * Definition for NodeCopy (clone node):
 * public class NodeCopy {
 *     int val;
 *     NodeCopy left;
 *     NodeCopy right;
 *     NodeCopy random;
 *     NodeCopy() {}
 *     NodeCopy(int val) { this.val = val; }
 *     NodeCopy(int val, NodeCopy left, NodeCopy right, NodeCopy random) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *         this.random = random;
 *     }
 * }
 */

class Solution {
    private Map<Node, NodeCopy> mp = new HashMap<>();

    public NodeCopy copyRandomBinaryTree(Node root) {
        return dfs(root);
    }

    private NodeCopy dfs(Node node) {
        if (node == null) {
            return null;
        }
        if (mp.containsKey(node)) {
            return mp.get(node);
        }
        NodeCopy clone = new NodeCopy(node.val);
        mp.put(node, clone);
        clone.left = dfs(node.left);
        clone.right = dfs(node.right);
        clone.random = dfs(node.random);
        return clone;
    }
}
