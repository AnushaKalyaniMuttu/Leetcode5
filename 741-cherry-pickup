class Solution {

    public int cherryPickup(int[][] grid) {
        int n = grid.length;
        int[][][] dp = new int[n][n][n];
        
        for (int[][] matrix : dp) {
            for (int[] row : matrix) {
                Arrays.fill(row, Integer.MIN_VALUE);
            }
        }

        dp[0][0][0] = grid[0][0];

        for (int t = 1; t < 2 * n - 1; t++) {
            for (int x1 = Math.max(0, t - (n - 1)); x1 <= Math.min(n - 1, t); x1++) {
                for (int x2 = Math.max(0, t - (n - 1)); x2 <= Math.min(n - 1, t); x2++) {
                    int y1 = t - x1;
                    int y2 = t - x2;
                    if (grid[x1][y1] == -1 || grid[x2][y2] == -1) continue;

                    int cherries = grid[x1][y1];
                    if (x1 != x2) cherries += grid[x2][y2];

                    int max = Integer.MIN_VALUE;
                    for (int dx1 = -1; dx1 <= 0; dx1++) {
                        for (int dx2 = -1; dx2 <= 0; dx2++) {
                            int px1 = x1 + dx1;
                            int px2 = x2 + dx2;
                            int py1 = t - 1 - px1;
                            int py2 = t - 1 - px2;
                            if (px1 >= 0 && px2 >= 0 && py1 >= 0 && py1 < n && py2 >= 0 && py2 < n) {
                                max = Math.max(max, dp[px1][px2][t - 1 - px1]);
                            }
                        }
                    }

                    if (max != Integer.MIN_VALUE) {
                        dp[x1][x2][t - x1] = max + cherries;
                    }
                }
            }
        }

        return Math.max(0, dp[n - 1][n - 1][n - 1]);
    }

}
