import java.util.List;

class Solution {
    // Trie node definition.
    class TrieNode {
        TrieNode[] children;
        String word;  // Stores the complete root if this node marks the end of a root
        
        public TrieNode() {
            children = new TrieNode[26];
            word = null;
        }
    }
    
    private TrieNode root;
    
    // Main function to replace words in the sentence
    public String replaceWords(List<String> dict, String sentence) {
        root = new TrieNode();
        // Build the Trie with all root words
        for (String word : dict) {
            insert(word);
        }
        
        StringBuilder sb = new StringBuilder();
        // Process each word in the sentence
        for (String word : sentence.split(" ")) {
            if (sb.length() > 0) {
                sb.append(" ");
            }
            sb.append(search(word));
        }
        return sb.toString();
    }
    
    // Insert a word into the Trie
    private void insert(String word) {
        TrieNode curr = root;
        for (char c : word.toCharArray()) {
            int index = c - 'a';
            if (curr.children[index] == null) {
                curr.children[index] = new TrieNode();
            }
            curr = curr.children[index];
        }
        curr.word = word; // mark the end of a root word
    }
    
    // Search for the shortest root for the given word
    private String search(String word) {
        TrieNode curr = root;
        for (char c : word.toCharArray()) {
            int index = c - 'a';
            if (curr.children[index] == null) {
                return word; // No root found; return original word.
            }
            curr = curr.children[index];
            if (curr.word != null) {
                return curr.word; // Found the shortest root.
            }
        }
        return word; // No root found; return original word.
    }
}
