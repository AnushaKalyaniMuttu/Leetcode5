public class Solution {
    public String shortestSuperstring(String[] words) {
        int n = words.length;
        int[][] overlap = new int[n][n];

        // Precompute overlaps
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i != j) {
                    int maxOverlap = Math.min(words[i].length(), words[j].length());
                    for (int k = maxOverlap; k >= 0; --k) {
                        if (words[i].endsWith(words[j].substring(0, k))) {
                            overlap[i][j] = k;
                            break;
                        }
                    }
                }
            }
        }

        int[][] dp = new int[1 << n][n];
        int[][] parent = new int[1 << n][n];

        for (int mask = 0; mask < (1 << n); ++mask) {
            Arrays.fill(dp[mask], Integer.MAX_VALUE / 2);
            Arrays.fill(parent[mask], -1);
        }

        for (int i = 0; i < n; ++i)
            dp[1 << i][i] = words[i].length();

        for (int mask = 1; mask < (1 << n); ++mask) {
            for (int j = 0; j < n; ++j) {
                if ((mask & (1 << j)) == 0) continue;
                int prevMask = mask ^ (1 << j);
                if (prevMask == 0) continue;

                for (int i = 0; i < n; ++i) {
                    if ((prevMask & (1 << i)) == 0) continue;
                    int val = dp[prevMask][i] + words[j].length() - overlap[i][j];
                    if (val < dp[mask][j]) {
                        dp[mask][j] = val;
                        parent[mask][j] = i;
                    }
                }
            }
        }

        // Find minimum cost ending
        int min = Integer.MAX_VALUE;
        int last = -1;
        int fullMask = (1 << n) - 1;
        for (int i = 0; i < n; ++i) {
            if (dp[fullMask][i] < min) {
                min = dp[fullMask][i];
                last = i;
            }
        }

        // Reconstruct path
        StringBuilder sb = new StringBuilder();
        List<Integer> path = new ArrayList<>();
        int mask = fullMask;

        while (last != -1) {
            path.add(last);
            int temp = parent[mask][last];
            mask ^= (1 << last);
            last = temp;
        }

        Collections.reverse(path);
        sb.append(words[path.get(0)]);
        for (int i = 1; i < path.size(); ++i) {
            int o = overlap[path.get(i - 1)][path.get(i)];
            sb.append(words[path.get(i)].substring(o));
        }

        return sb.toString();
    }
}
