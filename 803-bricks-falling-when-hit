class Solution {
    int rows, cols;
    int[] parent, size;
    int[][] grid;
    final int TOP = 0;

    public int[] hitBricks(int[][] grid, int[][] hits) {
        this.grid = grid;
        rows = grid.length;
        cols = grid[0].length;
        int len = hits.length;
        int[] result = new int[len];
        parent = new int[rows * cols + 1];
        size = new int[rows * cols + 1];

        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
            size[i] = 1;
        }

        // Copy and apply hits
        int[][] copy = new int[rows][cols];
        for (int i = 0; i < rows; i++)
            copy[i] = grid[i].clone();

        for (int[] hit : hits) {
            copy[hit[0]][hit[1]] = 0;
        }

        // Connect stable bricks
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (copy[i][j] == 1) {
                    int idx = getIndex(i, j);
                    if (i == 0) {
                        union(idx, TOP);
                    }
                    for (int[] d : new int[][]{{0,1},{0,-1},{1,0},{-1,0}}) {
                        int ni = i + d[0], nj = j + d[1];
                        if (ni >= 0 && ni < rows && nj >= 0 && nj < cols && copy[ni][nj] == 1) {
                            union(idx, getIndex(ni, nj));
                        }
                    }
                }
            }
        }

        // Process hits in reverse
        for (int i = len - 1; i >= 0; i--) {
            int r = hits[i][0], c = hits[i][1];
            if (grid[r][c] == 0) {
                result[i] = 0;
                continue;
            }

            int before = size[find(TOP)];
            int idx = getIndex(r, c);
            copy[r][c] = 1;

            for (int[] d : new int[][]{{0,1},{0,-1},{1,0},{-1,0}}) {
                int ni = r + d[0], nj = c + d[1];
                if (ni >= 0 && ni < rows && nj >= 0 && nj < cols && copy[ni][nj] == 1) {
                    union(idx, getIndex(ni, nj));
                }
            }

            if (r == 0) {
                union(idx, TOP);
            }

            int after = size[find(TOP)];
            result[i] = Math.max(0, after - before - 1);
        }

        return result;
    }

    private int getIndex(int r, int c) {
        return r * cols + c + 1;
    }

    private int find(int x) {
        if (parent[x] != x)
            parent[x] = find(parent[x]);
        return parent[x];
    }

    private void union(int x, int y) {
        int px = find(x), py = find(y);
        if (px == py) return;
        parent[px] = py;
        size[py] += size[px];
    }
}
