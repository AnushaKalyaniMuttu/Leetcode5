public class Solution {
    public int regionsBySlashes(String[] grid) {
        int n = grid.length;
        // Each cell has 4 parts => total 4 * n * n nodes
        UnionFind uf = new UnionFind(4 * n * n);

        for (int row = 0; row < n; row++) {
            for (int col = 0; col < n; col++) {
                int index = 4 * (row * n + col);
                char val = grid[row].charAt(col);

                // Internal connections within a cell
                if (val == ' ') {
                    // connect all 4 parts
                    uf.union(index + 0, index + 1);
                    uf.union(index + 1, index + 2);
                    uf.union(index + 2, index + 3);
                } else if (val == '/') {
                    // connect 0-3, 1-2
                    uf.union(index + 0, index + 3);
                    uf.union(index + 1, index + 2);
                } else if (val == '\\') {
                    // connect 0-1, 2-3
                    uf.union(index + 0, index + 1);
                    uf.union(index + 2, index + 3);
                }

                // Connect with neighboring cells

                // connect bottom of current cell with top of cell below
                if (row + 1 < n) {
                    int bottom = index + 2;
                    int neighborTop = 4 * ((row + 1) * n + col) + 0;
                    uf.union(bottom, neighborTop);
                }

                // connect right of current cell with left of cell to the right
                if (col + 1 < n) {
                    int right = index + 1;
                    int neighborLeft = 4 * (row * n + col + 1) + 3;
                    uf.union(right, neighborLeft);
                }
            }
        }

        return uf.count();
    }

    // Union-Find (Disjoint Set Union)
    class UnionFind {
        private int[] parent;
        private int count;

        public UnionFind(int size) {
            parent = new int[size];
            count = size;
            for (int i = 0; i < size; i++) parent[i] = i;
        }

        public int find(int x) {
            if (parent[x] != x)
                parent[x] = find(parent[x]); // path compression
            return parent[x];
        }

        public void union(int x, int y) {
            int px = find(x);
            int py = find(y);
            if (px != py) {
                parent[px] = py;
                count--;
            }
        }

        public int count() {
            return count;
        }
    }
}
