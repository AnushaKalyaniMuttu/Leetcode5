import java.util.*;

class Solution {
    public int[][] outerTrees(int[][] trees) {
        if (trees.length <= 1) return trees;

        Arrays.sort(trees, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);

        List<int[]> hull = new ArrayList<>();

        // Build lower hull
        for (int[] tree : trees) {
            while (hull.size() >= 2 && crossProduct(hull.get(hull.size() - 2), hull.get(hull.size() - 1), tree) < 0) {
                hull.remove(hull.size() - 1);
            }
            hull.add(tree);
        }

        // Build upper hull
        int size = hull.size();
        for (int i = trees.length - 1; i >= 0; i--) {
            while (hull.size() > size && crossProduct(hull.get(hull.size() - 2), hull.get(hull.size() - 1), trees[i]) < 0) {
                hull.remove(hull.size() - 1);
            }
            hull.add(trees[i]);
        }

        // Remove duplicates
        Set<int[]> result = new HashSet<>(hull);
        return result.toArray(new int[result.size()][]);
    }

    private int crossProduct(int[] p, int[] q, int[] r) {
        return (q[0] - p[0]) * (r[1] - p[1]) - (q[1] - p[1]) * (r[0] - p[0]);
    }
}
