import java.util.Stack;

class Solution {
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<>();
        int currentNum = 0;
        int result = 0;
        int sign = 1;  // 1 for positive, -1 for negative
        
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            
            if (Character.isDigit(ch)) {
                currentNum = currentNum * 10 + (ch - '0');
            } 
            
            if (ch == '+' || ch == '-' || ch == '(' || ch == ')' || i == s.length() - 1) {
                if (ch == '+' || ch == '-') {
                    result += sign * currentNum;
                    sign = (ch == '+') ? 1 : -1;
                    currentNum = 0;
                } else if (ch == '(') {
                    // Push the current result and sign onto the stack
                    stack.push(result);
                    stack.push(sign);
                    result = 0;
                    sign = 1;
                } else if (ch == ')') {
                    // Pop the sign and previous result from the stack
                    result += sign * currentNum;
                    currentNum = 0;
                    result *= stack.pop();  // stack.pop() is the sign before '('
                    result += stack.pop();  // stack.pop() is the result before '('
                }
            }
        }
        
        result += sign * currentNum;  // Add the last number
        return result;
    }
}
