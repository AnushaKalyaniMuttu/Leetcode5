import java.util.*;

class Solution {
    class UnionFind {
        int[] parent, size;
        public UnionFind(int n) {
            parent = new int[n];
            size = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }
        public int find(int x) {
            if (parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }
        public void union(int a, int b) {
            int rootA = find(a), rootB = find(b);
            if (rootA == rootB) return;
            if (size[rootA] < size[rootB]) {
                parent[rootA] = rootB;
                size[rootB] += size[rootA];
            } else {
                parent[rootB] = rootA;
                size[rootA] += size[rootB];
            }
        }
    }

    public int numberOfGoodPaths(int[] vals, int[][] edges) {
        int n = vals.length;
        List<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) graph[i] = new ArrayList<>();
        for (int[] edge : edges) {
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }

        // Map value to list of nodes having that value
        TreeMap<Integer, List<Integer>> valToNodes = new TreeMap<>();
        for (int i = 0; i < n; i++) {
            valToNodes.computeIfAbsent(vals[i], k -> new ArrayList<>()).add(i);
        }

        UnionFind uf = new UnionFind(n);
        int result = 0;

        for (int val : valToNodes.keySet()) {
            for (int node : valToNodes.get(val)) {
                for (int neighbor : graph[node]) {
                    if (vals[neighbor] <= val) {
                        uf.union(node, neighbor);
                    }
                }
            }

            Map<Integer, Integer> groupCount = new HashMap<>();
            for (int node : valToNodes.get(val)) {
                int root = uf.find(node);
                groupCount.put(root, groupCount.getOrDefault(root, 0) + 1);
            }

            for (int count : groupCount.values()) {
                result += count * (count + 1) / 2;  // Number of good paths in group
            }
        }

        return result;
    }
}
