class Solution {
    public int longestAwesome(String s) {
        int n = s.length();
        int[] first = new int[1 << 10];
        Arrays.fill(first, Integer.MAX_VALUE);
        first[0] = -1; // base case: parity 0 seen before start

        int mask = 0, ans = 0;
        for (int i = 0; i < n; i++) {
            int d = s.charAt(i) - '0';
            mask ^= 1 << d;

            // Perfect palindrome condition
            ans = Math.max(ans, i - first[mask]);

            // Allow one odd count
            for (int b = 0; b < 10; b++) {
                ans = Math.max(ans, i - first[mask ^ (1 << b)]);
            }

            // Save earliest occurrence
            first[mask] = Math.min(first[mask], i);
        }
        return ans;
    }
}
