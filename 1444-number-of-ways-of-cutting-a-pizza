class Solution {
    private static final int MOD = 1_000_000_007;
    private int[][] prefixSum;
    private Integer[][][] memo;
    private int rows, cols;

    public int ways(String[] pizza, int k) {
        rows = pizza.length;
        cols = pizza[0].length();

        prefixSum = new int[rows + 1][cols + 1];

        // Build prefix sum of apples count
        for (int r = rows - 1; r >= 0; r--) {
            for (int c = cols - 1; c >= 0; c--) {
                prefixSum[r][c] = (pizza[r].charAt(c) == 'A' ? 1 : 0)
                        + prefixSum[r + 1][c] + prefixSum[r][c + 1] - prefixSum[r + 1][c + 1];
            }
        }

        memo = new Integer[rows][cols][k];
        return dfs(0, 0, k - 1);
    }

    private int dfs(int r, int c, int cutsRemaining) {
        if (prefixSum[r][c] == 0) return 0; // No apples in this piece
        if (cutsRemaining == 0) return 1; // No more cuts, valid piece

        if (memo[r][c][cutsRemaining] != null) return memo[r][c][cutsRemaining];

        int ways = 0;

        // Try horizontal cuts
        for (int nr = r + 1; nr < rows; nr++) {
            if (prefixSum[r][c] - prefixSum[nr][c] > 0) {
                ways = (ways + dfs(nr, c, cutsRemaining - 1)) % MOD;
            }
        }

        // Try vertical cuts
        for (int nc = c + 1; nc < cols; nc++) {
            if (prefixSum[r][c] - prefixSum[r][nc] > 0) {
                ways = (ways + dfs(r, nc, cutsRemaining - 1)) % MOD;
            }
        }

        return memo[r][c][cutsRemaining] = ways;
    }
}
