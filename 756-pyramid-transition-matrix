class Solution {
    Map<String, List<Character>> transitionMap = new HashMap<>();

    public boolean pyramidTransition(String bottom, List<String> allowed) {
        // Build the map: key = pair, value = list of possible tops
        for (String s : allowed) {
            String key = s.substring(0, 2);
            char val = s.charAt(2);
            transitionMap.computeIfAbsent(key, k -> new ArrayList<>()).add(val);
        }

        return dfs(bottom, "");
    }

    private boolean dfs(String current, String next) {
        if (current.length() == 1) return true;
        if (next.length() == current.length() - 1) {
            return dfs(next, "");
        }

        int index = next.length();
        String key = current.substring(index, index + 2);
        if (!transitionMap.containsKey(key)) return false;

        for (char c : transitionMap.get(key)) {
            if (dfs(current, next + c)) {
                return true;
            }
        }

        return false;
    }
}
