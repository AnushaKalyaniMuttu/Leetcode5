class Solution {
    public List<Boolean> checkArithmeticSubarrays(int[] nums, int[] l, int[] r) {
        List<Boolean> ans = new ArrayList<>();
        for (int i = 0; i < l.length; ++i) {
            ans.add(isArithmetic(nums, l[i], r[i]));
        }
        return ans;
    }

    private boolean isArithmetic(int[] nums, int left, int right) {
        if (right - left < 2) return true;

        int mn = Integer.MAX_VALUE, mx = Integer.MIN_VALUE;
        Set<Integer> set = new HashSet<>();

        for (int i = left; i <= right; ++i) {
            mn = Math.min(mn, nums[i]);
            mx = Math.max(mx, nums[i]);
            set.add(nums[i]);
        }

        int len = right - left;
        if ((mx - mn) % len != 0) return false;
        int interval = (mx - mn) / len;

        for (int k = 1; k <= len; ++k) {
            if (!set.contains(mn + k * interval)) return false;
        }

        return true;
    }
}
