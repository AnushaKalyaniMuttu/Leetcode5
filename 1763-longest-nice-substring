class Solution {
    public String longestNiceSubstring(String s) {
        if (s == null || s.length() < 2) {
            return "";
        }
        // Build a set of characters in s
        Set<Character> seen = new HashSet<>();
        for (char c : s.toCharArray()) {
            seen.add(c);
        }
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            // If this character's opposite case is *not* in the set, it cannot be in any nice substring
            char toggled = Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c);
            if (!seen.contains(toggled)) {
                // Split around this character, recursively check both parts
                String left = longestNiceSubstring(s.substring(0, i));
                String right = longestNiceSubstring(s.substring(i + 1));
                return left.length() >= right.length() ? left : right;
            }
        }
        // If we never found such a “bad” character, the whole string is nice
        return s;
    }
}
