// This is the API interface.
// You should not implement it, or speculate about its implementation.
interface Sea {
    boolean hasShips(int[] topRight, int[] bottomLeft);
}

class Solution {
    public int countShips(Sea sea, int[] topRight, int[] bottomLeft) {
        // If invalid rectangle
        if (topRight[0] < bottomLeft[0] || topRight[1] < bottomLeft[1]) return 0;
        
        // If no ships in this rectangle
        if (!sea.hasShips(topRight, bottomLeft)) return 0;
        
        // If the rectangle is a single point and has a ship
        if (topRight[0] == bottomLeft[0] && topRight[1] == bottomLeft[1]) return 1;
        
        int midX = (topRight[0] + bottomLeft[0]) / 2;
        int midY = (topRight[1] + bottomLeft[1]) / 2;
        
        int count = 0;
        // Top-left rectangle
        count += countShips(sea, new int[]{midX, topRight[1]}, new int[]{bottomLeft[0], midY + 1});
        // Top-right rectangle
        count += countShips(sea, new int[]{topRight[0], topRight[1]}, new int[]{midX + 1, midY + 1});
        // Bottom-left rectangle
        count += countShips(sea, new int[]{midX, midY}, new int[]{bottomLeft[0], bottomLeft[1]});
        // Bottom-right rectangle
        count += countShips(sea, new int[]{topRight[0], midY}, new int[]{midX + 1, bottomLeft[1]});
        
        return count;
    }
}
