/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
import java.util.HashSet;
import java.util.Set;

public class Solution {
    public int numComponents(ListNode head, int[] nums) {
        // Step 1: Convert the nums array to a Set for O(1) lookup
        Set<Integer> numSet = new HashSet<>();
        for (int num : nums) {
            numSet.add(num);
        }

        // Step 2: Traverse the linked list and count components
        int components = 0;
        boolean inComponent = false; // Flag to track if we are in a component
        
        while (head != null) {
            if (numSet.contains(head.val)) {
                // If we're not already in a component, it means we've found the start of a new component
                if (!inComponent) {
                    components++;
                    inComponent = true;  // Mark that we are in a component
                }
            } else {
                inComponent = false; // We are no longer in a component
            }
            head = head.next;  // Move to the next node
        }
        
        return components;
    }

}