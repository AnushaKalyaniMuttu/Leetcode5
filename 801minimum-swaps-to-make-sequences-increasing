public class Solution {
    public int minSwap(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int[] keep = new int[n]; // No swap at i
        int[] swap = new int[n]; // Swap at i

        keep[0] = 0;
        swap[0] = 1;

        for (int i = 1; i < n; i++) {
            keep[i] = swap[i] = Integer.MAX_VALUE;

            // Case 1: No swap needed
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                keep[i] = keep[i - 1];
                swap[i] = swap[i - 1] + 1;
            }

            // Case 2: Swap needed
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                keep[i] = Math.min(keep[i], swap[i - 1]);
                swap[i] = Math.min(swap[i], keep[i - 1] + 1);
            }
        }

        return Math.min(keep[n - 1], swap[n - 1]);
    }
}
