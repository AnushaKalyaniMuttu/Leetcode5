class Solution {
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length; // number of cities
        boolean[] visited = new boolean[n]; // to keep track of visited cities
        int provinceCount = 0;

        // Loop through all cities
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                // If city i is not visited, it's a new province
                dfs(isConnected, visited, i);
                provinceCount++; // increment province count
            }
        }

        return provinceCount;
    }

    // Perform DFS to mark all cities in the same province
    private void dfs(int[][] isConnected, boolean[] visited, int city) {
        visited[city] = true; // mark current city as visited

        // Visit all cities directly connected to the current city
        for (int i = 0; i < isConnected.length; i++) {
            if (isConnected[city][i] == 1 && !visited[i]) {
                dfs(isConnected, visited, i); // visit the connected city
            }
        }
    }
}
