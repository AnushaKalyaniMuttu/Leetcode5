import java.util.*;

public class Solution {
    public int kSimilarity(String s1, String s2) {
        Queue<String> q = new ArrayDeque<>(Arrays.asList(s1));
        Set<String> seen = new HashSet<>(Arrays.asList(s1));

        int steps = 0;
        while (!q.isEmpty()) {
            for (int sz = q.size(); sz > 0; --sz) {
                String curr = q.poll();
                if (curr.equals(s2)) {
                    return steps;
                }
                for (String child : getChildren(curr, s2)) {
                    if (seen.contains(child)) continue;
                    q.offer(child);
                    seen.add(child);
                }
            }
            ++steps;
        }
        return -1; // Should never reach here if s1 and s2 are anagrams
    }

    private List<String> getChildren(String curr, String target) {
        List<String> children = new ArrayList<>();
        char[] charArray = curr.toCharArray();
        int i = 0;
        while (curr.charAt(i) == target.charAt(i)) ++i;

        for (int j = i + 1; j < charArray.length; ++j) {
            if (curr.charAt(j) == target.charAt(i)) {
                swap(charArray, i, j);
                children.add(String.valueOf(charArray));
                swap(charArray, i, j); // Swap back
            }
        }
        return children;
    }

    private void swap(char[] charArray, int i, int j) {
        char temp = charArray[i];
        charArray[i] = charArray[j];
        charArray[j] = temp;
    }
}
