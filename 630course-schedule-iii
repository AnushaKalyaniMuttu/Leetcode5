import java.util.Arrays;
import java.util.PriorityQueue;

class Solution {
    public int scheduleCourse(int[][] courses) {
        // Sort courses by their ending day
        Arrays.sort(courses, (a, b) -> a[1] - b[1]);
        
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
        int totalTime = 0;
        
        for (int[] course : courses) {
            int duration = course[0];
            int end = course[1];
            
            // If taking this course doesn't exceed its end time, take it.
            if (totalTime + duration <= end) {
                totalTime += duration;
                maxHeap.offer(duration);
            } 
            // Otherwise, if there's a course with a longer duration taken before,
            // replace it with the current course if it helps.
            else if (!maxHeap.isEmpty() && maxHeap.peek() > duration) {
                totalTime += duration - maxHeap.poll();
                maxHeap.offer(duration);
            }
        }
        
        // The number of courses in the heap represents the maximum courses taken.
        return maxHeap.size();
    }
}
