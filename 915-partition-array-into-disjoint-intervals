class Solution {
    public int partitionDisjoint(int[] A) {
        int n = A.length;
        
        // Step 1: Create maxLeft and minRight arrays
        int[] maxLeft = new int[n];
        int[] minRight = new int[n];
        
        // Fill maxLeft array: maxLeft[i] is the max of A[0..i]
        maxLeft[0] = A[0];
        for (int i = 1; i < n; i++) {
            maxLeft[i] = Math.max(maxLeft[i - 1], A[i]);
        }
        
        // Fill minRight array: minRight[i] is the min of A[i..n-1]
        minRight[n - 1] = A[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            minRight[i] = Math.min(minRight[i + 1], A[i]);
        }
        
        // Step 2: Find the partition point
        for (int i = 0; i < n - 1; i++) {
            if (maxLeft[i] <= minRight[i + 1]) {
                return i + 1; // The smallest partition length
            }
        }
        
        return n; // Default case when no partition point found (not really needed)
    }
}
