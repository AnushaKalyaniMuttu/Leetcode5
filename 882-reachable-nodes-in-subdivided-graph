import java.util.*;

class Solution {
    public int reachableNodes(int[][] edges, int maxMoves, int n) {
        List<int[]>[] graph = new List[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            graph[edge[0]].add(new int[]{edge[1], edge[2]});
            graph[edge[1]].add(new int[]{edge[0], edge[2]});
        }

        int[] dist = new int[n];
        Arrays.fill(dist, maxMoves + 1);
        dist[0] = 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        pq.offer(new int[]{0, 0});

        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            int d = curr[0], node = curr[1];
            if (d > dist[node]) continue;
            for (int[] neighbor : graph[node]) {
                int nextNode = neighbor[0], weight = neighbor[1];
                int newDist = d + weight + 1;
                if (newDist < dist[nextNode]) {
                    dist[nextNode] = newDist;
                    pq.offer(new int[]{newDist, nextNode});
                }
            }
        }

        int reachableNodes = 0;
        for (int d : dist) {
            if (d <= maxMoves) reachableNodes++;
        }

        int reachableSubnodes = 0;
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1], cnt = edge[2];
            int a = dist[u] > maxMoves ? 0 : Math.min(maxMoves - dist[u], cnt);
            int b = dist[v] > maxMoves ? 0 : Math.min(maxMoves - dist[v], cnt);
            reachableSubnodes += Math.min(a + b, cnt);
        }

        return reachableNodes + reachableSubnodes;
    }
}
