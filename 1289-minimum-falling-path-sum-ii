class Solution {
    public int minFallingPathSum(int[][] grid) {
        int n = grid.length;
        int[][] dp = new int[n][n];

        // Initialize dp for the first row
        for (int j = 0; j < n; j++) {
            dp[0][j] = grid[0][j];
        }

        // Compute dp values row by row
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int min = Integer.MAX_VALUE;
                for (int k = 0; k < n; k++) {
                    if (k != j) { // can't pick the same column
                        min = Math.min(min, dp[i - 1][k]);
                    }
                }
                dp[i][j] = min + grid[i][j];
            }
        }

        // Find the minimum in the last row
        int result = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) {
            result = Math.min(result, dp[n - 1][j]);
        }
        return result;
    }
}
