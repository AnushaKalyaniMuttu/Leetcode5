/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int findDistance(TreeNode root, int p, int q) {
        // Step 1: Find LCA of nodes with values p and q
        TreeNode lca = getLCA(root, p, q);
        // Step 2: Compute distance from LCA to p, and LCA to q
        int d1 = distanceFrom(lca, p);
        int d2 = distanceFrom(lca, q);
        return d1 + d2;
    }
    
    private TreeNode getLCA(TreeNode node, int p, int q) {
        if (node == null) return null;
        if (node.val == p || node.val == q) {
            return node;
        }
        TreeNode left = getLCA(node.left, p, q);
        TreeNode right = getLCA(node.right, p, q);
        if (left != null && right != null) {
            return node;
        }
        return (left != null) ? left : right;
    }
    
    private int distanceFrom(TreeNode node, int target) {
        if (node == null) {
            return -1; // target not found
        }
        if (node.val == target) {
            return 0;
        }
        int left = distanceFrom(node.left, target);
        if (left >= 0) {
            return left + 1;
        }
        int right = distanceFrom(node.right, target);
        if (right >= 0) {
            return right + 1;
        }
        return -1; // target not in this subtree
    }
}
