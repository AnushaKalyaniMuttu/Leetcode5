class Solution {
    public int strongPasswordChecker(String password) {
        int n = password.length();
        boolean hasLower = false, hasUpper = false, hasDigit = false;

        // Check character types
        for (char c : password.toCharArray()) {
            if (Character.isLowerCase(c)) hasLower = true;
            if (Character.isUpperCase(c)) hasUpper = true;
            if (Character.isDigit(c)) hasDigit = true;
        }

        int missingTypes = (hasLower ? 0 : 1) + (hasUpper ? 0 : 1) + (hasDigit ? 0 : 1);

        // Case 1: Password is too short (< 6)
        if (n < 6) {
            return Math.max(6 - n, missingTypes);
        }

        // Count repeating sequences
        int replace = 0, oneSeq = 0, twoSeq = 0;
        for (int i = 2; i < n; ) {
            if (password.charAt(i) == password.charAt(i - 1) && password.charAt(i) == password.charAt(i - 2)) {
                int length = 2;
                while (i < n && password.charAt(i) == password.charAt(i - 1)) {
                    length++;
                    i++;
                }
                replace += length / 3;
                if (length % 3 == 0) oneSeq++;
                else if (length % 3 == 1) twoSeq++;
            } else {
                i++;
            }
        }

        // Case 2: Password is within [6, 20] length
        if (n <= 20) {
            return Math.max(missingTypes, replace);
        }

        // Case 3: Password is too long (> 20)
        int deletions = n - 20;
        replace -= Math.min(deletions, oneSeq); 
        replace -= Math.min(Math.max(deletions - oneSeq, 0), twoSeq * 2) / 2; 
        replace -= Math.max(deletions - oneSeq - 2 * twoSeq, 0) / 3;

        return deletions + Math.max(missingTypes, replace);
    }
}
