import java.util.PriorityQueue;

public class Solution {
    public boolean isPossible(int[] target) {
        if (target.length == 1) {
            return target[0] == 1;
        }
        
        PriorityQueue<Long> maxHeap = new PriorityQueue<>((a, b) -> Long.compare(b, a));
        long totalSum = 0;
        
        for (int num : target) {
            totalSum += num;
            maxHeap.offer((long)num);
        }
        
        while (true) {
            long largest = maxHeap.poll();
            long rest = totalSum - largest;
            
            if (largest == 1 || rest == 1) {
                return true;
            }
            
            if (rest == 0 || largest < rest || largest % rest == 0) {
                return false;
            }
            
            largest %= rest;
            totalSum = rest + largest;
            maxHeap.offer(largest);
        }
    }
}
