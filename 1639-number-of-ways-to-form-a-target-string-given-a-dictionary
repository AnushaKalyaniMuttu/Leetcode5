class Solution {
    public int numWays(String[] words, String target) {
        int MOD = 1_000_000_007;
        int m = words[0].length();
        int n = target.length();

        // Step 1: Count character frequencies per column
        int[][] freq = new int[m][26];
        for (String word : words) {
            for (int i = 0; i < m; i++) {
                freq[i][word.charAt(i) - 'a']++;
            }
        }

        // Step 2: DP table: dp[i][j] = ways to build target[i:] from column j
        long[][] dp = new long[n + 1][m + 1];

        // Base case: 1 way to build empty string
        for (int j = 0; j <= m; j++) {
            dp[n][j] = 1;
        }

        // Fill dp bottom-up
        for (int i = n - 1; i >= 0; i--) {
            for (int j = m - 1; j >= 0; j--) {
                // Skip this column
                dp[i][j] = dp[i][j + 1];

                // Use this column if it has target.charAt(i)
                char ch = target.charAt(i);
                int count = freq[j][ch - 'a'];
                if (count > 0) {
                    dp[i][j] += count * dp[i + 1][j + 1];
                    dp[i][j] %= MOD;
                }
            }
        }

        return (int) dp[0][0];
    }
}
