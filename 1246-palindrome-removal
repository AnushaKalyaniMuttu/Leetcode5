public class Solution {
    public int minimumMoves(int[] arr) {
        int n = arr.length;
        int[][] dp = new int[n][n];

        // Base cases
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }

        // Fill dp for substrings of length 2 to n
        for (int length = 2; length <= n; length++) {
            for (int i = 0; i + length - 1 < n; i++) {
                int j = i + length - 1;
                dp[i][j] = 1 + dp[i + 1][j];  // Remove arr[i] alone first

                for (int k = i + 1; k <= j; k++) {
                    if (arr[i] == arr[k]) {
                        int between = (k - 1 >= i + 1) ? dp[i + 1][k - 1] : 0;
                        dp[i][j] = Math.min(dp[i][j], between + (k + 1 <= j ? dp[k + 1][j] : 0));
                    }
                }
            }
        }
        return dp[0][n - 1];
    }
}
