import java.util.*;

class Solution {
    public List<Integer> killProcess(List<Integer> pid, List<Integer> ppid, int kill) {
        // Build process tree using adjacency list
        Map<Integer, List<Integer>> processTree = new HashMap<>();
        for (int i = 0; i < pid.size(); i++) {
            processTree.computeIfAbsent(ppid.get(i), k -> new ArrayList<>()).add(pid.get(i));
        }

        // BFS to find all processes to be killed
        List<Integer> result = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.add(kill);

        while (!queue.isEmpty()) {
            int current = queue.poll();
            result.add(current);
            if (processTree.containsKey(current)) {
                queue.addAll(processTree.get(current));
            }
        }

        return result;
    }
}
