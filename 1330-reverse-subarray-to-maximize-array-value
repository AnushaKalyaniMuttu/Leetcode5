class Solution {
    public int maxValueAfterReverse(int[] nums) {
        int n = nums.length;
        int originalValue = 0;

        // Calculate the original total sum of absolute differences
        for (int i = 0; i < n - 1; i++) {
            originalValue += Math.abs(nums[i] - nums[i + 1]);
        }

        int maxGain = 0;
        int maxMin = Integer.MIN_VALUE;
        int minMax = Integer.MAX_VALUE;

        // Calculate max gain by reversing subarray in the middle
        for (int i = 0; i < n - 1; i++) {
            int a = nums[i];
            int b = nums[i + 1];

            maxGain = Math.max(maxGain, Math.abs(nums[0] - b) - Math.abs(a - b));
            maxGain = Math.max(maxGain, Math.abs(nums[n - 1] - a) - Math.abs(a - b));

            maxMin = Math.max(maxMin, Math.min(a, b));
            minMax = Math.min(minMax, Math.max(a, b));
        }

        // Calculate gain by reversing a middle subarray to fix boundaries
        int gainFromInside = 2 * (maxMin - minMax);

        int result = originalValue + Math.max(maxGain, gainFromInside);

        return result;
    }
}
