import java.util.*;

public class Solution {
    public boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
        int[] parent = new int[n];
        Arrays.fill(parent, -1);

        // Check each child to assign parents
        for (int i = 0; i < n; i++) {
            if (leftChild[i] != -1) {
                if (parent[leftChild[i]] != -1) {
                    // leftChild has more than one parent
                    return false;
                }
                parent[leftChild[i]] = i;
            }
            if (rightChild[i] != -1) {
                if (parent[rightChild[i]] != -1) {
                    // rightChild has more than one parent
                    return false;
                }
                parent[rightChild[i]] = i;
            }
        }

        // Find the root (node with no parent)
        int root = -1;
        for (int i = 0; i < n; i++) {
            if (parent[i] == -1) {
                if (root == -1) {
                    root = i;
                } else {
                    // More than one root
                    return false;
                }
            }
        }

        if (root == -1) {
            // No root found
            return false;
        }

        // BFS or DFS to check connectivity and cycles
        boolean[] visited = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(root);
        visited[root] = true;

        int count = 1;

        while (!queue.isEmpty()) {
            int node = queue.poll();

            int left = leftChild[node];
            if (left != -1) {
                if (visited[left]) {
                    // cycle detected
                    return false;
                }
                visited[left] = true;
                queue.offer(left);
                count++;
            }

            int right = rightChild[node];
            if (right != -1) {
                if (visited[right]) {
                    // cycle detected
                    return false;
                }
                visited[right] = true;
                queue.offer(right);
                count++;
            }
        }

        // Check if all nodes were visited (connected)
        return count == n;
    }
}
