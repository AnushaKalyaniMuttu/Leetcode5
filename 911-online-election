class TopVotedCandidate {

    private int[] times;
    private int[] leaders;

    public TopVotedCandidate(int[] persons, int[] times) {
        this.times = times;
        leaders = new int[persons.length];
        Map<Integer, Integer> voteCount = new HashMap<>();
        int topLeader = -1;
        int topVotes = 0;

        for (int i = 0; i < persons.length; i++) {
            int p = persons[i];
            voteCount.put(p, voteCount.getOrDefault(p, 0) + 1);
            if (voteCount.get(p) >= topVotes) {
                topVotes = voteCount.get(p);
                topLeader = p;
            }
            leaders[i] = topLeader;
        }
    }

    public int q(int t) {
        int left = 0, right = times.length - 1;

        // Binary search to find the latest time â‰¤ t
        while (left < right) {
            int mid = (left + right + 1) / 2;
            if (times[mid] <= t) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }

        return leaders[left];
    }
}

/**
 * Your TopVotedCandidate object will be instantiated and called as such:
 * TopVotedCandidate obj = new TopVotedCandidate(persons, times);
 * int param_1 = obj.q(t);
 */
