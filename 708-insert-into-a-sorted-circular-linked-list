class Node {
    int val;
    Node next;

    Node(int val) {
        this.val = val;
        this.next = null;
    }
}

public class InsertIntoSortedCircularLinkedList {
    public Node insert(Node head, int insertVal) {
        Node newNode = new Node(insertVal);

        // Case 1: If the list is empty, create a new single-node circular list.
        if (head == null) {
            newNode.next = newNode;
            return newNode;
        }

        Node prev = head;
        Node curr = head.next;
        boolean toInsert = false;

        do {
            // Case 2: Insert in the middle of two nodes in a sorted position.
            if (prev.val <= insertVal && insertVal <= curr.val) {
                toInsert = true;
            }
            // Case 3: Insert at the boundary (smallest or largest value).
            else if (prev.val > curr.val && (insertVal >= prev.val || insertVal <= curr.val)) {
                toInsert = true;
            }

            if (toInsert) {
                prev.next = newNode;
                newNode.next = curr;
                return head;
            }

            prev = curr;
            curr = curr.next;
        } while (prev != head);

        // Case 4: If no position is found (all values are the same), insert anywhere.
        prev.next = newNode;
        newNode.next = curr;

        return head;
    }
}
