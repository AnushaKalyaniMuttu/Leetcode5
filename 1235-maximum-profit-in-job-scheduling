class Solution {
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int n = startTime.length;
        int[][] jobs = new int[n][3];
        for (int i = 0; i < n; i++) {
            jobs[i] = new int[]{startTime[i], endTime[i], profit[i]};
        }
        // Sort jobs by end time
        Arrays.sort(jobs, Comparator.comparingInt(a -> a[1]));

        int[] dp = new int[n + 1];
        // dp[i]: max profit using first i jobs (sorted by end time)

        for (int i = 1; i <= n; i++) {
            int[] job = jobs[i - 1];
            int prev = binarySearch(jobs, i - 1, job[0]);
            dp[i] = Math.max(dp[i - 1], dp[prev] + job[2]);
        }
        return dp[n];
    }

    // Find the first job ending at or before 'start'
    private int binarySearch(int[][] jobs, int right, int start) {
        int lo = 0, hi = right;
        while (lo < hi) {
            int mid = lo + (hi - lo + 1) / 2;
            if (jobs[mid][1] <= start) lo = mid;
            else hi = mid - 1;
        }
        return (right >= 0 && jobs[lo][1] <= start) ? lo + 1 : 0;
    }
}
