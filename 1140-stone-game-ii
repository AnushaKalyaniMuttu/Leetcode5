public class Solution {
    private int[] prefixSum;
    private Integer[][] dp;
    private int n;

    public int stoneGameII(int[] piles) {
        n = piles.length;
        prefixSum = new int[n + 1];
        dp = new Integer[n][n + 1];
        
        // Compute prefix sum array
        for (int i = 0; i < n; ++i) {
            prefixSum[i + 1] = prefixSum[i] + piles[i];
        }
        
        // Start the game with the first pile and M = 1
        return dfs(0, 1);
    }

    private int dfs(int i, int m) {
        // Base case: if we can take all remaining piles
        if (m * 2 >= n - i) {
            return prefixSum[n] - prefixSum[i];
        }

        // Check if the result is already computed
        if (dp[i][m] != null) {
            return dp[i][m];
        }

        int result = 0;
        // Try all possible x moves
        for (int x = 1; x <= 2 * m; ++x) {
            // Calculate the opponent's score and update the result
            result = Math.max(result, prefixSum[n] - prefixSum[i] - dfs(i + x, Math.max(m, x)));
        }

        // Store the result in the dp table
        dp[i][m] = result;
        return result;
    }
}
