import java.util.*;

class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {
        // Create adjacency list to represent the graph
        List<Integer>[] graph = new List[n + 1];
        for (int i = 1; i <= n; i++) {
            graph[i] = new ArrayList<>();
        }

        // Build the graph from the dislikes array
        for (int[] dislike : dislikes) {
            int u = dislike[0], v = dislike[1];
            graph[u].add(v);
            graph[v].add(u);
        }

        // Array to track the color (group) of each person
        int[] color = new int[n + 1]; // 0: uncolored, 1: group 1, -1: group 2

        // Try to color each person using DFS
        for (int i = 1; i <= n; i++) {
            if (color[i] == 0 && !dfs(graph, color, i, 1)) {
                return false; // If a conflict is found, return false
            }
        }

        return true; // If no conflicts are found, return true
    }

    // Helper DFS function to attempt to color the graph
    private boolean dfs(List<Integer>[] graph, int[] color, int node, int currentColor) {
        color[node] = currentColor;

        for (int neighbor : graph[node]) {
            if (color[neighbor] == currentColor) {
                return false; // Same color on both sides, not bipartite
            }
            if (color[neighbor] == 0 && !dfs(graph, color, neighbor, -currentColor)) {
                return false; // Recur with the opposite color
            }
        }

        return true;
    }
}
