/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private double maxAvg = Double.MIN_VALUE;

    public double maximumAverageSubtree(TreeNode root) {
        calculateSubtreeSumAndCount(root);
        return maxAvg;
    }

    private double[] calculateSubtreeSumAndCount(TreeNode node) {
        if (node == null) {
            return new double[]{0, 0};
        }

        double[] left = calculateSubtreeSumAndCount(node.left);
        double[] right = calculateSubtreeSumAndCount(node.right);

        double sum = left[0] + right[0] + node.val;
        double count = left[1] + right[1] + 1;
        double avg = sum / count;

        maxAvg = Math.max(maxAvg, avg);

        return new double[]{sum, count};
    }
}
