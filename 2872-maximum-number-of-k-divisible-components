import java.util.*;

class Solution {
    private int count = 0;

    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }

        dfs(0, -1, graph, values, k);
        return count;
    }

    private long dfs(int node, int parent, List<List<Integer>> graph, int[] values, int k) {
        long sum = values[node]; // Use long to avoid overflow

        for (int neighbor : graph.get(node)) {
            if (neighbor != parent) {
                sum += dfs(neighbor, node, graph, values, k);
            }
        }

        if (sum % k == 0) {
            count++;
            return 0;
        }

        return sum;
    }
}
