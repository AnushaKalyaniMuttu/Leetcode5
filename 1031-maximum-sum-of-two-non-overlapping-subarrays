class Solution {
    public int maxSumTwoNoOverlap(int[] nums, int firstLen, int secondLen) {
        return Math.max(maxSum(nums, firstLen, secondLen), maxSum(nums, secondLen, firstLen));
    }

    private int maxSum(int[] nums, int L, int M) {
        int n = nums.length;
        int[] prefix = new int[n + 1];

        // Compute prefix sum
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }

        int maxL = 0, result = 0;

        // i = end of M-length subarray
        for (int i = L + M; i <= n; i++) {
            // max sum of L-length subarray before the M-length one
            maxL = Math.max(maxL, prefix[i - M] - prefix[i - M - L]);

            // total sum = best L + current M
            result = Math.max(result, maxL + prefix[i] - prefix[i - M]);
        }

        return result;
    }
}
