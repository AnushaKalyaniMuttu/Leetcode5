/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // Base case: if the root is null or root is one of p or q
        if (root == null || root == p || root == q) {
            return root;
        }

        // Recursively find the LCA in the left and right subtrees
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);

        // If both left and right are non-null, it means p and q are on different sides
        // of the current root, so root is their LCA
        if (left != null && right != null) {
            return root;
        }

        // Otherwise, return the non-null side, which contains either p or q
        return left != null ? left : right;
    }
}
