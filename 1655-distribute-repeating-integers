class Solution {
    public boolean canDistribute(int[] nums, int[] quantity) {
        int m = quantity.length;
        int[] subsetSum = new int[1 << m];
        for (int mask = 1; mask < (1 << m); mask++) {
            for (int j = 0; j < m; j++) {
                if ((mask & (1 << j)) != 0) {
                    subsetSum[mask] = subsetSum[mask ^ (1 << j)] + quantity[j];
                    break;
                }
            }
        }

        Map<Integer, Integer> countMap = new HashMap<>();
        for (int num : nums) {
            countMap.merge(num, 1, Integer::sum);
        }
        int[] freqs = countMap.values().stream().mapToInt(i -> i).toArray();
        int n = freqs.length;
        int maxMask = 1 << m;

        boolean[][] dp = new boolean[n + 1][maxMask];
        dp[n][maxMask - 1] = true;  // All customers satisfied when no freqs left

        for (int i = n - 1; i >= 0; i--) {
            for (int mask = 0; mask < maxMask; mask++) {
                if (dp[i + 1][mask]) {
                    dp[i][mask] = true;
                    continue;
                }
                int avail = (~mask) & (maxMask - 1);
                for (int sub = avail; sub > 0; sub = (sub - 1) & avail) {
                    if (subsetSum[sub] <= freqs[i] && dp[i + 1][mask | sub]) {
                        dp[i][mask] = true;
                        break;
                    }
                }
            }
        }

        return dp[0][0];
    }
}
