class Solution {
    private int totalSum = 0;
    private boolean isPossible = false;

    public boolean checkEqualTree(TreeNode root) {
        totalSum = calculateSum(root);
        if (totalSum % 2 != 0) return false; // If the total sum is odd, it's not possible
        
        calculateSum(root); // Reuse the function to check for possible partition
        return isPossible;
    }

    private int calculateSum(TreeNode node) {
        if (node == null) return 0;

        int sum = node.val + calculateSum(node.left) + calculateSum(node.right);

        // Check if removing the subtree rooted at 'node' can partition the tree
        if (node != null && sum == totalSum / 2) {
            isPossible = true;
        }

        return sum;
    }
}
