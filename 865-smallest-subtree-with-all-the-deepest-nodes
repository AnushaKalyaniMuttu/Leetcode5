/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode subtreeWithAllDeepest(TreeNode root) {
        int depth = maxDepth(root);
        return findSubtree(root, depth, 1);
    }

    private int maxDepth(TreeNode node) {
        if (node == null) return 0;
        return Math.max(maxDepth(node.left), maxDepth(node.right)) + 1;
    }

    private TreeNode findSubtree(TreeNode node, int maxDepth, int currentDepth) {
        if (node == null) return null;
        if (currentDepth == maxDepth) return node;

        TreeNode left = findSubtree(node.left, maxDepth, currentDepth + 1);
        TreeNode right = findSubtree(node.right, maxDepth, currentDepth + 1);

        if (left != null && right != null) return node;
        return left != null ? left : right;
    }
}
