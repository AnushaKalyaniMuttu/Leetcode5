import java.util.*;

class Solution {
    private TrieNode root = new TrieNode();
    private Set<String> wordSet = new HashSet<>();

    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        List<String> result = new ArrayList<>();
        Arrays.sort(words, (a, b) -> a.length() - b.length());

        for (String word : words) {
            if (!word.isEmpty() && canForm(word, new HashSet<>())) {
                result.add(word);
            }
            insert(word);
        }

        return result;
    }

    private boolean canForm(String word, Set<String> visited) {
        if (wordSet.contains(word)) return true;
        if (visited.contains(word)) return false;

        visited.add(word);
        for (int i = 1; i < word.length(); i++) {
            String prefix = word.substring(0, i);
            String suffix = word.substring(i);

            if (wordSet.contains(prefix) && canForm(suffix, visited)) {
                return true;
            }
        }

        return false;
    }

    private void insert(String word) {
        TrieNode node = root;
        wordSet.add(word);
        for (char c : word.toCharArray()) {
            if (node.children[c - 'a'] == null) {
                node.children[c - 'a'] = new TrieNode();
            }
            node = node.children[c - 'a'];
        }
        node.isWord = true;
    }

    static class TrieNode {
        TrieNode[] children = new TrieNode[26];
        boolean isWord;
    }
}
