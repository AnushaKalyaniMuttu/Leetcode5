import java.util.*;

class Solution {
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        boolean[] visited = new boolean[n * n + 1];
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(1);
        visited[1] = true;
        int moves = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int s = 0; s < size; s++) {
                int curr = queue.poll();
                if (curr == n * n) return moves;

                for (int i = 1; i <= 6; i++) {
                    int next = curr + i;
                    if (next > n * n) break;
                    int[] pos = getBoardPosition(next, n);
                    int val = board[pos[0]][pos[1]];
                    if (val != -1) next = val;

                    if (!visited[next]) {
                        visited[next] = true;
                        queue.offer(next);
                    }
                }
            }
            moves++;
        }

        return -1;
    }

    // Convert 1D position to 2D board coordinates
    private int[] getBoardPosition(int num, int n) {
        int row = (num - 1) / n;
        int col = (num - 1) % n;
        if (row % 2 == 1) col = n - 1 - col;
        return new int[]{n - 1 - row, col};
    }
}
