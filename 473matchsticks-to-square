import java.util.Arrays;

class Solution {
    public boolean makesquare(int[] matchsticks) {
        if (matchsticks == null || matchsticks.length < 4) return false;
        
        int sum = Arrays.stream(matchsticks).sum();
        if (sum % 4 != 0) return false; // Total sum must be divisible by 4
        
        Arrays.sort(matchsticks);
        reverse(matchsticks); // Sorting in descending order for optimization
        
        int[] sides = new int[4];
        return backtrack(matchsticks, sides, 0, sum / 4);
    }

    private boolean backtrack(int[] matchsticks, int[] sides, int index, int target) {
        if (index == matchsticks.length) {
            return sides[0] == target && sides[1] == target && sides[2] == target;
        }

        for (int i = 0; i < 4; i++) {
            if (sides[i] + matchsticks[index] > target) continue; // Pruning

            sides[i] += matchsticks[index];
            if (backtrack(matchsticks, sides, index + 1, target)) return true;
            sides[i] -= matchsticks[index]; // Backtrack

            if (sides[i] == 0) break; // Optimization: prevent duplicate calls
        }
        return false;
    }

    private void reverse(int[] arr) {
        int left = 0, right = arr.length - 1;
        while (left < right) {
            int temp = arr[left];
            arr[left++] = arr[right];
            arr[right--] = temp;
        }
    }
}
