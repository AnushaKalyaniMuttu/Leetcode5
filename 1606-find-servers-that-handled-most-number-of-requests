class Solution {
    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
        TreeSet<Integer> available = new TreeSet<>();
        for (int i = 0; i < k; i++) available.add(i);

        PriorityQueue<int[]> busy = new PriorityQueue<>((a, b) -> a[0] - b[0]); // {endTime, serverId}
        int[] count = new int[k];
        int maxCount = 0;

        for (int i = 0; i < arrival.length; i++) {
            int startTime = arrival[i];
            int duration = load[i];

            // Free up servers whose jobs have finished
            while (!busy.isEmpty() && busy.peek()[0] <= startTime) {
                available.add(busy.poll()[1]);
            }

            if (available.isEmpty()) continue; // Drop request

            // Find the smallest server >= i % k
            Integer server = available.ceiling(i % k);
            if (server == null) server = available.first();

            available.remove(server);
            count[server]++;
            maxCount = Math.max(maxCount, count[server]);
            busy.offer(new int[]{startTime + duration, server});
        }

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (count[i] == maxCount) result.add(i);
        }
        return result;
    }
}
