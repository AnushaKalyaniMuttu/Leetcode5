public class Solution {
    public int rob(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        // Edge case for single house
        if (nums.length == 1) {
            return nums[0];
        }
        
        // Use dynamic programming for two cases:
        // Case 1: Rob houses from 0 to n-2 (exclude the last house)
        // Case 2: Rob houses from 1 to n-1 (exclude the first house)
        return Math.max(robLinear(nums, 0, nums.length - 2), robLinear(nums, 1, nums.length - 1));
    }
    
    // Helper function to solve the linear case (without circular dependency)
    private int robLinear(int[] nums, int start, int end) {
        int prev1 = 0, prev2 = 0;
        
        for (int i = start; i <= end; i++) {
            int temp = prev1;
            prev1 = Math.max(prev1, prev2 + nums[i]);
            prev2 = temp;
        }
        
        return prev1;
    }
}
