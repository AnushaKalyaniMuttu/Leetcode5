import java.util.*;

public class Solution {
    public int numBusesToDestination(int[][] routes, int source, int target) {
        if (source == target) return 0;

        Map<Integer, List<Integer>> stopToRoutes = new HashMap<>();
        for (int i = 0; i < routes.length; i++) {
            for (int stop : routes[i]) {
                stopToRoutes.computeIfAbsent(stop, k -> new ArrayList<>()).add(i);
            }
        }

        Set<Integer> visitedStops = new HashSet<>();
        Set<Integer> visitedRoutes = new HashSet<>();
        Queue<Integer> stopQueue = new LinkedList<>();
        Queue<Integer> routeQueue = new LinkedList<>();
        int buses = 0;

        for (int routeIndex : stopToRoutes.getOrDefault(source, Collections.emptyList())) {
            routeQueue.offer(routeIndex);
            visitedRoutes.add(routeIndex);
        }

        while (!routeQueue.isEmpty()) {
            buses++;
            int routeCount = routeQueue.size();
            for (int i = 0; i < routeCount; i++) {
                int routeIndex = routeQueue.poll();
                for (int stop : routes[routeIndex]) {
                    if (stop == target) {
                        return buses;
                    }
                    if (visitedStops.add(stop)) {
                        for (int nextRouteIndex : stopToRoutes.getOrDefault(stop, Collections.emptyList())) {
                            if (visitedRoutes.add(nextRouteIndex)) {
                                routeQueue.offer(nextRouteIndex);
                            }
                        }
                    }
                }
            }
        }
        return -1;
    }
}
