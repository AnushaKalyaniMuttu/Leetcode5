class KthSmallestInstructions {
    public String kthSmallestPath(int[] destination, int k) {
        int row = destination[0];  // number of V moves
        int col = destination[1];  // number of H moves
        StringBuilder result = new StringBuilder();

        // Precompute binomial coefficients (nCr)
        long[][] comb = new long[row + col + 1][col + 1];
        for (int i = 0; i <= row + col; i++) {
            comb[i][0] = 1;
            for (int j = 1; j <= Math.min(i, col); j++) {
                comb[i][j] = comb[i - 1][j - 1] + comb[i - 1][j];
            }
        }

        while (row > 0 && col > 0) {
            long countH = comb[row + col - 1][col - 1]; // paths if we put 'H' first

            if (k <= countH) {
                result.append('H');
                col--;
            } else {
                result.append('V');
                row--;
                k -= countH;
            }
        }

        // append remaining moves
        while (col-- > 0) result.append('H');
        while (row-- > 0) result.append('V');

        return result.toString();
    }
}
