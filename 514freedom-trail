import java.util.*;

class Solution {
    Map<String, Integer> memo = new HashMap<>();
    
    public int findRotateSteps(String ring, String key) {
        return dfs(ring, key, 0, 0);
    }

    private int dfs(String ring, String key, int ringIndex, int keyIndex) {
        if (keyIndex == key.length()) return 0; // All characters matched
        
        String state = ringIndex + "," + keyIndex;
        if (memo.containsKey(state)) return memo.get(state);

        char target = key.charAt(keyIndex);
        int minSteps = Integer.MAX_VALUE;

        // Find all occurrences of the target character in ring
        for (int i = 0; i < ring.length(); i++) {
            if (ring.charAt(i) == target) {
                // Calculate distance (circular movement)
                int clockwise = Math.abs(i - ringIndex);
                int counterClockwise = ring.length() - clockwise;
                int step = Math.min(clockwise, counterClockwise) + 1; // +1 for pressing button
                
                // Recursive call for next character
                int totalSteps = step + dfs(ring, key, i, keyIndex + 1);
                
                // Find the minimum steps
                minSteps = Math.min(minSteps, totalSteps);
            }
        }

        memo.put(state, minSteps);
        return minSteps;
    }
}
