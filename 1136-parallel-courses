import java.util.*;

public class Solution {
    public int minimumSemesters(int n, int[][] relations) {
        // Graph construction
        Map<Integer, Set<Integer>> graph = new HashMap<>();
        int[] inDegree = new int[n + 1];
        
        for (int i = 1; i <= n; i++) {
            graph.put(i, new HashSet<>());
        }
        for (int[] relation : relations) {
            if (graph.get(relation[0]).add(relation[1])) {
                inDegree[relation[1]]++;
            }
        }
        
        // BFS initialization
        Queue<Integer> queue = new LinkedList<>();
        int semester = 0, courseCount = 0;
        
        for (int i = 1; i <= n; i++) {
            if (inDegree[i] == 0) {
                queue.add(i);
            }
        }
        
        // BFS processing
        while (!queue.isEmpty()) {
            int size = queue.size();
            courseCount += size;
            for (int i = 0; i < size; i++) {
                int current = queue.poll();
                for (int neighbor : graph.get(current)) {
                    inDegree[neighbor]--;
                    if (inDegree[neighbor] == 0) {
                        queue.add(neighbor);
                    }
                }
            }
            semester++;
        }
        
        return courseCount == n ? semester : -1;
    }
}
