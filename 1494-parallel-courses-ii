class Solution {
    public int minNumberOfSemesters(int n, int[][] relations, int k) {
        int N = 1 << n;
        int[] dp = new int[N];
        Arrays.fill(dp, n + 1);
        dp[0] = 0;

        int[] prereq = new int[n];
        for (int[] r : relations) {
            int u = r[0] - 1, v = r[1] - 1;
            prereq[v] |= 1 << u;
        }

        for (int mask = 0; mask < N; mask++) {
            if (dp[mask] > n) continue;  // unreachable
            int available = 0;
            for (int i = 0; i < n; i++) {
                if ((mask & (1 << i)) == 0 && (mask & prereq[i]) == prereq[i]) {
                    available |= 1 << i;
                }
            }
            // try all subsets of available
            for (int sub = available; sub > 0; sub = (sub - 1) & available) {
                if (Integer.bitCount(sub) <= k) {
                    dp[mask | sub] = Math.min(dp[mask | sub], dp[mask] + 1);
                }
            }
        }

        return dp[N - 1];
    }
}
