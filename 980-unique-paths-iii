class Solution {
    private int result = 0, empty = 1;
    private int startX, startY;
    
    public int uniquePathsIII(int[][] grid) {
        int rows = grid.length, cols = grid[0].length;

        // Find start position and count empty squares
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 0) {
                    empty++;
                } else if (grid[i][j] == 1) {
                    startX = i;
                    startY = j;
                }
            }
        }

        dfs(grid, startX, startY);
        return result;
    }

    private void dfs(int[][] grid, int x, int y) {
        // Out of bounds or on obstacle
        if (x < 0 || y < 0 || x >= grid.length || y >= grid[0].length || grid[x][y] == -1) return;

        if (grid[x][y] == 2) {
            if (empty == 0) result++;
            return;
        }

        // Mark the cell as visited
        grid[x][y] = -1;
        empty--;

        // Move in 4 directions
        dfs(grid, x + 1, y);
        dfs(grid, x - 1, y);
        dfs(grid, x, y + 1);
        dfs(grid, x, y - 1);

        // Backtrack
        grid[x][y] = 0;
        empty++;
    }
}
