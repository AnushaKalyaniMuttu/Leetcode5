import java.util.*;

public class Solution {
    public boolean validTree(int n, int[][] edges) {
        // A tree with n nodes has exactly n - 1 edges
        if (edges.length != n - 1) {
            return false;
        }

        // Create an adjacency list to represent the graph
        List<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }

        // Build the graph from the edges
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1];
            graph[u].add(v);
            graph[v].add(u);
        }

        // To keep track of visited nodes
        boolean[] visited = new boolean[n];

        // Start DFS from node 0
        if (dfs(0, -1, graph, visited)) {
            // Check if all nodes are visited (the graph must be connected)
            for (boolean visit : visited) {
                if (!visit) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    // DFS function to detect cycle and mark visited nodes
    private boolean dfs(int node, int parent, List<Integer>[] graph, boolean[] visited) {
        visited[node] = true;
        
        // Traverse all neighbors of the current node
        for (int neighbor : graph[node]) {
            if (!visited[neighbor]) {
                if (!dfs(neighbor, node, graph, visited)) {
                    return false;
                }
            } else if (neighbor != parent) {
                // If we visit an already visited node that is not the parent, a cycle exists
                return false;
            }
        }
        return true;
    }
}
