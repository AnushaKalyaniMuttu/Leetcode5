import java.util.*;

class Solution {
    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
        List<List<Node>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) graph.add(new ArrayList<>());

        // Build graph
        for (int i = 0; i < edges.length; i++) {
            int u = edges[i][0], v = edges[i][1];
            double prob = succProb[i];
            graph.get(u).add(new Node(v, prob));
            graph.get(v).add(new Node(u, prob));
        }

        double[] dist = new double[n];
        Arrays.fill(dist, 0.0);
        dist[start] = 1.0;

        PriorityQueue<Node> pq = new PriorityQueue<>((a, b) -> Double.compare(b.prob, a.prob));
        pq.offer(new Node(start, 1.0));

        while (!pq.isEmpty()) {
            Node curr = pq.poll();
            int node = curr.id;
            double currProb = curr.prob;

            if (node == end) return currProb;

            if (currProb < dist[node]) continue;

            for (Node neighbor : graph.get(node)) {
                double newProb = currProb * neighbor.prob;
                if (newProb > dist[neighbor.id]) {
                    dist[neighbor.id] = newProb;
                    pq.offer(new Node(neighbor.id, newProb));
                }
            }
        }
        return 0.0;
    }

    static class Node {
        int id;
        double prob;
        Node(int id, double prob) {
            this.id = id;
            this.prob = prob;
        }
    }
}
