import java.util.*;

class Solution {
    public double mincostToHireWorkers(int[] quality, int[] wage, int K) {
        int n = quality.length;
        Worker[] workers = new Worker[n];
        for (int i = 0; i < n; i++) {
            workers[i] = new Worker((double) wage[i] / quality[i], quality[i]);
        }
        Arrays.sort(workers, Comparator.comparingDouble(w -> w.ratio));

        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        double qualitySum = 0;
        double minCost = Double.MAX_VALUE;

        for (int i = 0; i < n; i++) {
            qualitySum += workers[i].quality;
            maxHeap.offer(workers[i].quality);
            if (maxHeap.size() > K) {
                qualitySum -= maxHeap.poll();
            }
            if (maxHeap.size() == K) {
                minCost = Math.min(minCost, qualitySum * workers[i].ratio);
            }
        }

        return minCost;
    }

    private static class Worker {
        double ratio;
        int quality;

        Worker(double ratio, int quality) {
            this.ratio = ratio;
            this.quality = quality;
        }
    }
}
