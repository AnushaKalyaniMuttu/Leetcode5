public class Solution {
    public int largest1BorderedSquare(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] top = new int[m][n];
        int[][] left = new int[m][n];
        
        // Fill top and left arrays
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    top[i][j] = (i == 0) ? 1 : top[i - 1][j] + 1;
                    left[i][j] = (j == 0) ? 1 : left[i][j - 1] + 1;
                }
            }
        }
        
        // Check for the largest square
        for (int size = Math.min(m, n); size > 0; size--) {
            for (int i = 0; i <= m - size; i++) {
                for (int j = 0; j <= n - size; j++) {
                    if (top[i + size - 1][j] >= size &&
                        top[i + size - 1][j + size - 1] >= size &&
                        left[i][j + size - 1] >= size &&
                        left[i + size - 1][j + size - 1] >= size) {
                        return size * size;
                    }
                }
            }
        }
        
        return 0;
    }
}
