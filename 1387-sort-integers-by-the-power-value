import java.util.*;

class Solution {
    // Cache for power values to optimize repeated calculations
    private Map<Integer, Integer> cache = new HashMap<>();
    
    public int getKth(int lo, int hi, int k) {
        // Prepare a list of integers from lo to hi
        List<Integer> list = new ArrayList<>();
        for (int i = lo; i <= hi; i++) {
            list.add(i);
        }
        
        // Sort by power value, if tie then by number itself
        Collections.sort(list, (a, b) -> {
            int powerA = getPowerValue(a);
            int powerB = getPowerValue(b);
            if (powerA != powerB) {
                return powerA - powerB;
            } else {
                return a - b;
            }
        });
        
        // Return k-th element (1-indexed)
        return list.get(k - 1);
    }
    
    private int getPowerValue(int x) {
        if (x == 1) {
            return 0;
        }
        if (cache.containsKey(x)) {
            return cache.get(x);
        }
        
        int next;
        if (x % 2 == 0) {
            next = x / 2;
        } else {
            next = 3 * x + 1;
        }
        
        int result = 1 + getPowerValue(next);
        cache.put(x, result);
        return result;
    }
}
