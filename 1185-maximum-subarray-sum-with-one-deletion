class Solution {
    public int maximumSum(int[] arr) {
        int n = arr.length, result = arr[0];
        int[] left = new int[n], right = new int[n];
        
        // left[i]: max subarray sum ending at i (no deletion)
        left[0] = arr[0];
        for (int i = 1; i < n; i++) {
            left[i] = Math.max(arr[i], left[i - 1] + arr[i]);
            result = Math.max(result, left[i]);
        }

        // right[i]: max subarray sum starting at i (no deletion), scan from right
        right[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = Math.max(arr[i], right[i + 1] + arr[i]);
        }

        // Consider deleting one element at i (1 ≤ i ≤ n-2)
        for (int i = 1; i < n - 1; i++) {
            result = Math.max(result, left[i - 1] + right[i + 1]);
        }
        
        return result;
    }
}
