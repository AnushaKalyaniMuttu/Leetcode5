class MyLinkedList {
    private class Node {
        int val;
        Node next, prev;
        Node(int val) { this.val = val; }
    }

    private Node head, tail;
    private int size;

    public MyLinkedList() {
        head = new Node(0); // Dummy head
        tail = new Node(0); // Dummy tail
        head.next = tail;
        tail.prev = head;
        size = 0;
    }

    public int get(int index) {
        if (index < 0 || index >= size) return -1;
        Node curr = getNode(index);
        return curr.val;
    }

    public void addAtHead(int val) {
        addAtIndex(0, val);
    }

    public void addAtTail(int val) {
        addAtIndex(size, val);
    }

    public void addAtIndex(int index, int val) {
        if (index < 0 || index > size) return;
        Node prevNode = (index == size) ? tail.prev : getNode(index - 1);
        Node newNode = new Node(val);
        Node nextNode = prevNode.next;

        prevNode.next = newNode;
        newNode.prev = prevNode;
        newNode.next = nextNode;
        nextNode.prev = newNode;

        size++;
    }

    public void deleteAtIndex(int index) {
        if (index < 0 || index >= size) return;
        Node toDelete = getNode(index);
        Node prevNode = toDelete.prev;
        Node nextNode = toDelete.next;

        prevNode.next = nextNode;
        nextNode.prev = prevNode;
        size--;
    }

    private Node getNode(int index) {
        Node curr;
        if (index < size / 2) {
            curr = head.next;
            for (int i = 0; i < index; i++) curr = curr.next;
        } else {
            curr = tail.prev;
            for (int i = size - 1; i > index; i--) curr = curr.prev;
        }
        return curr;
    }
}


/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */
