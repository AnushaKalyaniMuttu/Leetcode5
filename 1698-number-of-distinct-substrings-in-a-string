import java.util.*;

public class Solution {
    public int countDistinct(String s) {
        int n = s.length();
        // Choose a base (e.g. 131) and use long for hash (we rely on overflow or mod 2^64)
        long base = 131;
        long[] power = new long[n + 1];
        long[] hash = new long[n + 1];
        power[0] = 1;
        hash[0] = 0;
        
        for (int i = 0; i < n; i++) {
            power[i + 1] = power[i] * base;
            hash[i + 1] = hash[i] * base + (s.charAt(i) - 'a' + 1);
        }
        
        Set<Long> seen = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j <= n; j++) {
                // substring s[i..j-1]
                long curHash = hash[j] - hash[i] * power[j - i];
                seen.add(curHash);
            }
        }
        return seen.size();
    }
}
