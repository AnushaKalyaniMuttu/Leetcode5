class Solution {
     private int[][] cost;
    private int[][] memo;
    private int n, m;
    private static final int INF = Integer.MAX_VALUE / 2;

    public int connectTwoGroups(List<List<Integer>> costList) {
        n = costList.size();
        m = costList.get(0).size();
        cost = new int[n][m];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                cost[i][j] = costList.get(i).get(j);

        memo = new int[n + 1][1 << m];
        for (int[] row : memo) Arrays.fill(row, -1);

        return dfs(0, 0);
    }

    private int dfs(int i, int mask) {
        if (i == n) {
            int addCost = 0;
            for (int j = 0; j < m; j++) {
                if ((mask & (1 << j)) == 0) {
                    int min = INF;
                    for (int k = 0; k < n; k++) {
                        min = Math.min(min, cost[k][j]);
                    }
                    addCost += min;
                }
            }
            return addCost;
        }

        if (memo[i][mask] != -1) return memo[i][mask];

        int res = INF;
        for (int j = 0; j < m; j++) {
            res = Math.min(res,
                    cost[i][j] + dfs(i + 1, mask | (1 << j)));
        }

        return memo[i][mask] = res;
    }
}
