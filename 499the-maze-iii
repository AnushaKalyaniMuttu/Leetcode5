import java.util.*;

public class Solution {
    private static final int[][] DIRECTIONS = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    private static final String[] DIR_STRINGS = {"u", "d", "l", "r"};

    public String findShortestWay(int[][] maze, int[] ball, int[] hole) {
        int m = maze.length, n = maze[0].length;
        PriorityQueue<Point> pq = new PriorityQueue<>();
        pq.offer(new Point(ball[0], ball[1], 0, ""));
        boolean[][] visited = new boolean[m][n];

        while (!pq.isEmpty()) {
            Point curr = pq.poll();
            if (visited[curr.x][curr.y]) continue;
            visited[curr.x][curr.y] = true;
            if (curr.x == hole[0] && curr.y == hole[1]) return curr.path;

            for (int i = 0; i < DIRECTIONS.length; i++) {
                int[] dir = DIRECTIONS[i];
                int x = curr.x, y = curr.y, dist = curr.dist;
                while (isValid(maze, x + dir[0], y + dir[1])) {
                    x += dir[0];
                    y += dir[1];
                    dist++;
                    if (x == hole[0] && y == hole[1]) break;
                }
                if (!visited[x][y]) {
                    pq.offer(new Point(x, y, dist, curr.path + DIR_STRINGS[i]));
                }
            }
        }
        return "impossible";
    }

    private boolean isValid(int[][] maze, int x, int y) {
        return x >= 0 && x < maze.length && y >= 0 && y < maze[0].length && maze[x][y] == 0;
    }

    private static class Point implements Comparable<Point> {
        int x, y, dist;
        String path;

        Point(int x, int y, int dist, String path) {
            this.x = x;
            this.y = y;
            this.dist = dist;
            this.path = path;
        }

        public int compareTo(Point other) {
            if (this.dist == other.dist) {
                return this.path.compareTo(other.path);
            }
            return this.dist - other.dist;
        }
    }
}
