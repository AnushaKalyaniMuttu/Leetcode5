import java.util.*;

class Solution {
    private static final int[][] DIRECTIONS = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        int m = maze.length, n = maze[0].length;
        int[][] dist = new int[m][n];
        for (int[] row : dist) Arrays.fill(row, Integer.MAX_VALUE);
        dist[start[0]][start[1]] = 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[2]));
        pq.offer(new int[]{start[0], start[1], 0});
        
        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            int x = curr[0], y = curr[1], d = curr[2];
            if (x == destination[0] && y == destination[1]) return d;

            for (int[] dir : DIRECTIONS) {
                int newX = x, newY = y, newD = d;
                while (isValid(maze, newX + dir[0], newY + dir[1])) {
                    newX += dir[0];
                    newY += dir[1];
                    newD++;
                }
                if (newD < dist[newX][newY]) {
                    dist[newX][newY] = newD;
                    pq.offer(new int[]{newX, newY, newD});
                }
            }
        }
        return -1;
    }

    private boolean isValid(int[][] maze, int x, int y) {
        return x >= 0 && y >= 0 && x < maze.length && y < maze[0].length && maze[x][y] == 0;
    }
}
