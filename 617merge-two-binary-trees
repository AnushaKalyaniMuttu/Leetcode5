class TreeNode {
    int val;
    TreeNode left, right;
    
    TreeNode(int x) {
        val = x;
    }
}

public class MergeBinaryTrees {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if (root1 == null) return root2; // If one tree is null, return the other.
        if (root2 == null) return root1;
        
        root1.val += root2.val; // Merge values
        root1.left = mergeTrees(root1.left, root2.left); // Merge left subtrees
        root1.right = mergeTrees(root1.right, root2.right); // Merge right subtrees
        
        return root1; // Return the merged tree
    }

    // Helper method to print the tree (for testing)
    public void preOrder(TreeNode root) {
        if (root == null) return;
        System.out.print(root.val + " ");
        preOrder(root.left);
        preOrder(root.right);
    }

    public static void main(String[] args) {
        TreeNode root1 = new TreeNode(1);
        root1.left = new TreeNode(3);
        root1.left.left = new TreeNode(5);
        root1.right = new TreeNode(2);

        TreeNode root2 = new TreeNode(2);
        root2.left = new TreeNode(1);
        root2.left.right = new TreeNode(4);
        root2.right = new TreeNode(3);
        root2.right.right = new TreeNode(7);

        MergeBinaryTrees merger = new MergeBinaryTrees();
        TreeNode mergedTree = merger.mergeTrees(root1, root2);

        System.out.print("Preorder of merged tree: ");
        merger.preOrder(mergedTree);
    }
}
