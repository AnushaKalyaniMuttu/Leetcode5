class Solution {
     public int visiblePoints(List<List<Integer>> points, int angle, List<Integer> location) {
        List<Double> angles = new ArrayList<>();
        int sameLocation = 0;

        int ox = location.get(0), oy = location.get(1);

        // Step 1: Compute angles and count same-location points
        for (List<Integer> p : points) {
            int px = p.get(0), py = p.get(1);
            if (px == ox && py == oy) {
                sameLocation++;
                continue;
            }
            double theta = Math.toDegrees(Math.atan2(py - oy, px - ox));
            if (theta < 0) theta += 360; // Normalize to [0, 360)
            angles.add(theta);
        }

        // Step 2: Sort angles
        Collections.sort(angles);

        // Step 3: Duplicate list for wrap-around
        List<Double> extended = new ArrayList<>(angles);
        for (double a : angles) {
            extended.add(a + 360);
        }

        // Step 4: Sliding window
        int maxVisible = 0;
        int left = 0;
        for (int right = 0; right < extended.size(); right++) {
            while (extended.get(right) - extended.get(left) > angle) {
                left++;
            }
            maxVisible = Math.max(maxVisible, right - left + 1);
        }

        return maxVisible + sameLocation;
    }
}
