import java.util.*;

public class Solution {
    public String countOfAtoms(String formula) {
        Deque<Map<String, Integer>> stack = new ArrayDeque<>();
        stack.push(new HashMap<>());
        int n = formula.length();
        for (int i = 0; i < n; ) {
            char c = formula.charAt(i);
            if (c == '(') {
                stack.push(new HashMap<>());
                i++;
            } else if (c == ')') {
                i++;
                int start = i, multiplier = 1;
                while (i < n && Character.isDigit(formula.charAt(i))) i++;
                if (i > start) multiplier = Integer.parseInt(formula.substring(start, i));
                
                Map<String, Integer> top = stack.pop();
                Map<String, Integer> prev = stack.peek();
                for (String key : top.keySet()) {
                    prev.put(key, prev.getOrDefault(key, 0) + top.get(key) * multiplier);
                }
            } else {
                int start = i++;
                while (i < n && Character.isLowerCase(formula.charAt(i))) i++;
                String element = formula.substring(start, i);
                
                start = i;
                while (i < n && Character.isDigit(formula.charAt(i))) i++;
                int count = start < i ? Integer.parseInt(formula.substring(start, i)) : 1;
                
                stack.peek().put(element, stack.peek().getOrDefault(element, 0) + count);
            }
        }
        
        TreeMap<String, Integer> sortedMap = new TreeMap<>(stack.pop());
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<String, Integer> entry : sortedMap.entrySet()) {
            sb.append(entry.getKey());
            if (entry.getValue() > 1) sb.append(entry.getValue());
        }
        return sb.toString();
    }
}
