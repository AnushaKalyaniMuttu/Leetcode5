import java.util.*;

class Solution {
    public List<String> findAndReplacePattern(String[] words, String pattern) {
        List<String> result = new ArrayList<>();
        for (String word : words) {
            if (isIsomorphic(word, pattern)) {
                result.add(word);
            }
        }
        return result;
    }

    private boolean isIsomorphic(String word, String pattern) {
        Map<Character, Character> mapWordToPattern = new HashMap<>();
        Map<Character, Character> mapPatternToWord = new HashMap<>();

        for (int i = 0; i < word.length(); i++) {
            char w = word.charAt(i);
            char p = pattern.charAt(i);

            if (mapWordToPattern.containsKey(w) && mapWordToPattern.get(w) != p ||
                mapPatternToWord.containsKey(p) && mapPatternToWord.get(p) != w) {
                return false;
            }

            mapWordToPattern.put(w, p);
            mapPatternToWord.put(p, w);
        }
        return true;
    }
}
