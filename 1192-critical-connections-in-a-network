class Solution {
    private int time = 0;
    private List<List<Integer>> res = new ArrayList<>();
    private List<List<Integer>> graph;
    private int[] disc, low;

    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        graph = new ArrayList<>();
        for (int i = 0; i < n; i++) graph.add(new ArrayList<>());

        // Build undirected graph
        for (List<Integer> conn : connections) {
            int u = conn.get(0), v = conn.get(1);
            graph.get(u).add(v);
            graph.get(v).add(u);
        }

        disc = new int[n];
        low = new int[n];
        Arrays.fill(disc, -1);

        // Run DFS from each unvisited node (handles disconnected graphs)
        for (int i = 0; i < n; i++) {
            if (disc[i] == -1) dfs(i, -1);
        }
        return res;
    }

    private void dfs(int u, int parent) {
        disc[u] = low[u] = time++;
        for (int v : graph.get(u)) {
            if (v == parent) continue;          // skip edge to parent
            if (disc[v] == -1) {
                dfs(v, u);
                low[u] = Math.min(low[u], low[v]);
                if (low[v] > disc[u]) {
                    res.add(Arrays.asList(u, v));
                }
            } else {
                low[u] = Math.min(low[u], disc[v]);
            }
        }
    }
}
