class Solution {
  public int unhappyFriends(int n, int[][] preferences, int[][] pairs) {
        int[][] rank = new int[n][n]; // rank[i][j] is how i ranks j

        // Build rank matrix
        for (int i = 0; i < n; i++) {
            int[] pref = preferences[i];
            for (int j = 0; j < pref.length; j++) {
                rank[i][pref[j]] = j;
            }
        }

        int[] match = new int[n]; // match[i] is the person paired with i
        for (int[] pair : pairs) {
            match[pair[0]] = pair[1];
            match[pair[1]] = pair[0];
        }

        int unhappyCount = 0;

        for (int x = 0; x < n; x++) {
            int y = match[x];
            int[] pref = preferences[x];

            // Check only those more preferred than y
            for (int i = 0; i < rank[x][y]; i++) {
                int u = pref[i];
                int v = match[u];

                if (rank[u][x] < rank[u][v]) {
                    unhappyCount++;
                    break;
                }
            }
        }

        return unhappyCount;
    }
}
