import java.util.Arrays;

public class Solution {
    public int minimumCost(int n, int[][] connections) {
        // Sort connections by cost
        Arrays.sort(connections, (a, b) -> Integer.compare(a[2], b[2]));

        // Initialize Union-Find
        UnionFind uf = new UnionFind(n);

        int totalCost = 0;
        int edgesUsed = 0;

        for (int[] conn : connections) {
            int city1 = conn[0] - 1; // Adjusting for 0-based index
            int city2 = conn[1] - 1; // Adjusting for 0-based index
            int cost = conn[2];

            // If cities are not connected, connect them
            if (uf.union(city1, city2)) {
                totalCost += cost;
                edgesUsed++;
                // If we've used n-1 edges, all cities are connected
                if (edgesUsed == n - 1) {
                    return totalCost;
                }
            }
        }

        // If not all cities are connected
        return -1;
    }

    // Union-Find data structure
    class UnionFind {
        int[] parent;
        int[] rank;

        public UnionFind(int size) {
            parent = new int[size];
            rank = new int[size];
            for (int i = 0; i < size; i++) {
                parent[i] = i;
                rank[i] = 0;
            }
        }

        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }

        public boolean union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);

            if (rootX == rootY) {
                return false; // Already connected
            }

            // Union by rank
            if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }

            return true;
        }
    }
}
