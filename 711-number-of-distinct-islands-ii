import java.util.*;

public class NumberOfDistinctIslandsII {
    private static final int[][] TRANSFORMS = {
        {1, 1}, {1, -1}, {-1, 1}, {-1, -1}, // Reflection
        {1, -1}, {-1, -1}, {-1, 1}, {1, 1}  // Rotation
    };

    public int numDistinctIslands2(int[][] grid) {
        Set<String> uniqueIslands = new HashSet<>();
        int rows = grid.length, cols = grid[0].length;
        boolean[][] visited = new boolean[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    List<int[]> shape = new ArrayList<>();
                    dfs(grid, i, j, visited, shape);
                    uniqueIslands.add(normalize(shape));
                }
            }
        }
        return uniqueIslands.size();
    }

    private void dfs(int[][] grid, int i, int j, boolean[][] visited, List<int[]> shape) {
        int rows = grid.length, cols = grid[0].length;
        if (i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] == 0 || visited[i][j]) {
            return;
        }

        visited[i][j] = true;
        shape.add(new int[]{i, j});

        dfs(grid, i + 1, j, visited, shape);
        dfs(grid, i - 1, j, visited, shape);
        dfs(grid, i, j + 1, visited, shape);
        dfs(grid, i, j - 1, visited, shape);
    }

    private String normalize(List<int[]> shape) {
        List<String> transformations = new ArrayList<>();
        int[][] coords = new int[shape.size()][2];

        for (int t = 0; t < 8; t++) {
            int k = 0;
            for (int[] p : shape) {
                coords[k][0] = p[0] * TRANSFORMS[t][0];
                coords[k][1] = p[1] * TRANSFORMS[t][1];
                k++;
            }
            Arrays.sort(coords, (a, b) -> a[0] == b[0] ? Integer.compare(a[1], b[1]) : Integer.compare(a[0], b[0]));
            int x0 = coords[0][0], y0 = coords[0][1];
            StringBuilder sb = new StringBuilder();
            for (int[] p : coords) {
                sb.append((p[0] - x0) + "," + (p[1] - y0) + " ");
            }
            transformations.add(sb.toString());
        }

        Collections.sort(transformations);
        return transformations.get(0);
    }
}
