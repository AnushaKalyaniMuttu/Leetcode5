public class Solution {
    public int minCost(int[][] costs) {
        if (costs == null || costs.length == 0 || costs[0].length == 0) {
            return 0;
        }

        int n = costs.length;
        int k = costs[0].length;

        // dp array to keep track of the minimum costs
        int[][] dp = new int[n][k];

        // Initialize the first row with the first house costs
        for (int j = 0; j < k; j++) {
            dp[0][j] = costs[0][j];
        }

        // Fill the dp table for subsequent houses
        for (int i = 1; i < n; i++) {
            int min1 = Integer.MAX_VALUE, min2 = Integer.MAX_VALUE;
            int min1Index = -1;

            // Find the two smallest values from the previous row
            for (int j = 0; j < k; j++) {
                if (dp[i - 1][j] < min1) {
                    min2 = min1;
                    min1 = dp[i - 1][j];
                    min1Index = j;
                } else if (dp[i - 1][j] < min2) {
                    min2 = dp[i - 1][j];
                }
            }

            // For the current house, we pick the minimum cost for each color
            for (int j = 0; j < k; j++) {
                if (j == min1Index) {
                    dp[i][j] = costs[i][j] + min2;
                } else {
                    dp[i][j] = costs[i][j] + min1;
                }
            }
        }

        // The result is the minimum value in the last row of the dp table
        int result = Integer.MAX_VALUE;
        for (int j = 0; j < k; j++) {
            result = Math.min(result, dp[n - 1][j]);
        }

        return result;
    }
}
