class Solution {
    public int minCost(int[] houses, int[][] cost, int m, int n, int target) {
        int INF = 1000000000;
        int[][][] dp = new int[m][n][target + 1];
        
        // Initialize dp with INF
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k <= target; k++) {
                    dp[i][j][k] = INF;
                }
            }
        }
        
        // Base case: first house
        if (houses[0] == 0) {
            for (int c = 0; c < n; c++) {
                dp[0][c][1] = cost[0][c];
            }
        } else {
            dp[0][houses[0] - 1][1] = 0;
        }
        
        for (int i = 1; i < m; i++) {
            for (int c = 0; c < n; c++) {
                if (houses[i] != 0 && houses[i] != c + 1) {
                    // House already painted with different color
                    continue;
                }
                for (int pc = 0; pc < n; pc++) {
                    for (int t = 1; t <= target; t++) {
                        if (dp[i - 1][pc][t] == INF) continue;
                        int nt = t + (pc == c ? 0 : 1);
                        if (nt > target) continue;
                        int currCost = dp[i - 1][pc][t] + (houses[i] == 0 ? cost[i][c] : 0);
                        dp[i][c][nt] = Math.min(dp[i][c][nt], currCost);
                    }
                }
            }
        }
        
        int ans = INF;
        for (int c = 0; c < n; c++) {
            ans = Math.min(ans, dp[m - 1][c][target]);
        }
        return ans == INF ? -1 : ans;
    }
}
