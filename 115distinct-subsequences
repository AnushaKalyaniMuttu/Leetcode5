class Solution {
    public int numDistinct(String S, String T) {
        int m = S.length();
        int n = T.length();
        
        // dp[i][j] will represent the number of distinct subsequences of S[0..i-1] that match T[0..j-1]
        int[][] dp = new int[m + 1][n + 1];
        
        // Base case: an empty T can be formed by any subsequence of S, so dp[i][0] = 1 for all i
        for (int i = 0; i <= m; i++) {
            dp[i][0] = 1;
        }
        
        // Fill the dp table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (S.charAt(i - 1) == T.charAt(j - 1)) {
                    // If characters match, we have two choices:
                    // 1. Include this character and check dp[i-1][j-1]
                    // 2. Exclude this character and check dp[i-1][j]
                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
                } else {
                    // If characters don't match, exclude this character from S
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        
        // The answer is dp[m][n]
        return dp[m][n];
    }
}
