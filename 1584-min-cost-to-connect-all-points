class Solution {
     public int minCostConnectPoints(int[][] points) {
        int n = points.length;
        boolean[] visited = new boolean[n];
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        
        pq.offer(new int[]{0, 0}); // {cost, pointIndex}
        int totalCost = 0, edgesUsed = 0;
        
        while (edgesUsed < n) {
            int[] current = pq.poll();
            int cost = current[0], currPoint = current[1];
            
            if (visited[currPoint]) continue;
            
            visited[currPoint] = true;
            totalCost += cost;
            edgesUsed++;
            
            for (int i = 0; i < n; i++) {
                if (!visited[i]) {
                    int dist = Math.abs(points[currPoint][0] - points[i][0]) + 
                               Math.abs(points[currPoint][1] - points[i][1]);
                    pq.offer(new int[]{dist, i});
                }
            }
        }
        
        return totalCost;
    }
}
