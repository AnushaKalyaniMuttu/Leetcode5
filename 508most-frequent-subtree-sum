import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) { val = x; }
}

class Solution {
    private Map<Integer, Integer> sumCount = new HashMap<>();
    private int maxFreq = 0;

    public int[] findFrequentTreeSum(TreeNode root) {
        if (root == null) return new int[0];

        dfs(root);
        List<Integer> result = new ArrayList<>();

        for (var entry : sumCount.entrySet()) {
            if (entry.getValue() == maxFreq) {
                result.add(entry.getKey());
            }
        }

        return result.stream().mapToInt(i -> i).toArray();
    }

    private int dfs(TreeNode node) {
        if (node == null) return 0;
        int sum = node.val + dfs(node.left) + dfs(node.right);
        sumCount.put(sum, sumCount.getOrDefault(sum, 0) + 1);
        maxFreq = Math.max(maxFreq, sumCount.get(sum));
        return sum;
    }
}
