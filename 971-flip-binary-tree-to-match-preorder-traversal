/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

public class Solution {
    private int index = 0;
    private List<Integer> flips = new ArrayList<>();
    private boolean isPossible = true;

    public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {
        dfs(root, voyage);
        return isPossible ? flips : Arrays.asList(-1);
    }

    private void dfs(TreeNode node, int[] voyage) {
        if (node == null || !isPossible) return;

        if (node.val != voyage[index++]) {
            isPossible = false;
            return;
        }

        if (node.left != null && node.left.val != voyage[index]) {
            flips.add(node.val);
            dfs(node.right, voyage);
            dfs(node.left, voyage);
        } else {
            dfs(node.left, voyage);
            dfs(node.right, voyage);
        }
    }
}
