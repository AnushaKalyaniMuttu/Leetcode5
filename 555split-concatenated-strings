import java.util.PriorityQueue;

class Solution {
    public int[] assignBikes(int[][] workers, int[][] bikes) {
        int n = workers.length;
        int m = bikes.length;
        int[] result = new int[n];
        boolean[] bikeAssigned = new boolean[m];
        boolean[] workerAssigned = new boolean[n];
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            if (a[0] != b[0]) return a[0] - b[0]; // Sort by distance
            if (a[1] != b[1]) return a[1] - b[1]; // Then by worker index
            return a[2] - b[2]; // Then by bike index
        });

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int dist = Math.abs(workers[i][0] - bikes[j][0]) + Math.abs(workers[i][1] - bikes[j][1]);
                pq.offer(new int[]{dist, i, j});
            }
        }

        while (!pq.isEmpty()) {
            int[] entry = pq.poll();
            int worker = entry[1], bike = entry[2];
            if (!workerAssigned[worker] && !bikeAssigned[bike]) {
                result[worker] = bike;
                workerAssigned[worker] = true;
                bikeAssigned[bike] = true;
            }
        }
        
        return result;
    }
}
