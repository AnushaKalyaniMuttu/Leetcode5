import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int val) {
        this.val = val;
    }
}

public class BSTIterator {

    private List<Integer> inorder;
    private int index;

    public BSTIterator(TreeNode root) {
        inorder = new ArrayList<>();
        index = -1;
        inOrderTraversal(root);
    }

    // Perform in-order traversal and fill the list
    private void inOrderTraversal(TreeNode node) {
        if (node == null) return;
        inOrderTraversal(node.left);
        inorder.add(node.val);
        inOrderTraversal(node.right);
    }

    public boolean hasNext() {
        return index + 1 < inorder.size();
    }

    public int next() {
        if (hasNext()) {
            return inorder.get(++index);
        }
        return -1; // or throw exception
    }

    public boolean hasPrev() {
        return index - 1 >= 0;
    }

    public int prev() {
        if (hasPrev()) {
            return inorder.get(--index);
        }
        return -1; // or throw exception
    }

    // Example usage
    public static void main(String[] args) {
        TreeNode root = new TreeNode(7);
        root.left = new TreeNode(3);
        root.right = new TreeNode(15);
        root.right.left = new TreeNode(9);
        root.right.right = new TreeNode(20);

        BSTIterator iterator = new BSTIterator(root);
        System.out.println(iterator.next());    // 3
        System.out.println(iterator.next());    // 7
        System.out.println(iterator.hasPrev()); // true
        System.out.println(iterator.prev());    // 3
        System.out.println(iterator.hasNext()); // true
        System.out.println(iterator.next());    // 7
        System.out.println(iterator.next());    // 9
    }
}
