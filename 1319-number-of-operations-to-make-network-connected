class Solution {
    public int makeConnected(int n, int[][] connections) {
        // If there are fewer connections than n-1, impossible to connect all
        if (connections.length < n - 1) return -1;
        
        UnionFind uf = new UnionFind(n);
        
        for (int[] conn : connections) {
            uf.union(conn[0], conn[1]);
        }
        
        // Number of connected components minus 1 = operations needed
        return uf.getCount() - 1;
    }
}

class UnionFind {
    private int[] parent;
    private int count;  // number of connected components
    
    public UnionFind(int n) {
        parent = new int[n];
        count = n;
        for (int i = 0; i < n; i++) parent[i] = i;
    }
    
    public int find(int x) {
        if (parent[x] != x) parent[x] = find(parent[x]);  // path compression
        return parent[x];
    }
    
    public void union(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX != rootY) {
            parent[rootX] = rootY;
            count--;
        }
    }
    
    public int getCount() {
        return count;
    }
}
