class Solution {
    public int mergeStones(int[] stones, int k) {
        int n = stones.length;
        if ((n - 1) % (k - 1) != 0) return -1;

        int[][][] dp = new int[n][n][k + 1];
        int[] prefix = new int[n + 1];

        // Prefix sum
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + stones[i];
        }

        // Base case: single piles
        for (int i = 0; i < n; i++) {
            dp[i][i][1] = 0;
        }

        for (int len = 2; len <= n; len++) {
            for (int i = 0; i + len <= n; i++) {
                int j = i + len - 1;
                for (int t = 2; t <= k; t++) {
                    dp[i][j][t] = Integer.MAX_VALUE;
                    for (int m = i; m < j; m += k - 1) {
                        if (dp[i][m][1] == Integer.MAX_VALUE || dp[m + 1][j][t - 1] == Integer.MAX_VALUE) continue;
                        dp[i][j][t] = Math.min(dp[i][j][t], dp[i][m][1] + dp[m + 1][j][t - 1]);
                    }
                }

                // If we can merge t piles into 1
                dp[i][j][1] = Integer.MAX_VALUE;
                if (dp[i][j][k] != Integer.MAX_VALUE) {
                    dp[i][j][1] = dp[i][j][k] + prefix[j + 1] - prefix[i];
                }
            }
        }

        return dp[0][n - 1][1] == Integer.MAX_VALUE ? -1 : dp[0][n - 1][1];
    }
}
