class Solution {
    public int minDays(int[][] grid) {
        if (countIslands(grid) != 1) return 0;

        int rows = grid.length, cols = grid[0].length;

        // Try removing each land cell to see if island disconnects
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1) {
                    grid[i][j] = 0;
                    if (countIslands(grid) != 1) return 1;
                    grid[i][j] = 1;
                }
            }
        }

        return 2; // Worst case: need 2 removals
    }

    private int countIslands(int[][] grid) {
        int rows = grid.length, cols = grid[0].length;
        boolean[][] visited = new boolean[rows][cols];

        int count = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    dfs(grid, i, j, visited);
                    count++;
                }
            }
        }

        return count;
    }

    private void dfs(int[][] grid, int i, int j, boolean[][] visited) {
        int rows = grid.length, cols = grid[0].length;

        if (i < 0 || j < 0 || i >= rows || j >= cols || 
            grid[i][j] != 1 || visited[i][j]) return;

        visited[i][j] = true;

        dfs(grid, i + 1, j, visited);
        dfs(grid, i - 1, j, visited);
        dfs(grid, i, j + 1, visited);
        dfs(grid, i, j - 1, visited);
    }
}
