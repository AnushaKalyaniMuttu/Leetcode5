public class Solution {
    public int minimumMoves(int[] arr) {
        int n = arr.length;
        int[][] dp = new int[n][n];
        
        // Base case: single element removal takes 1 step
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        
        // Consider all subarray lengths from 2 to n
        for (int length = 2; length <= n; length++) {
            for (int i = 0; i <= n - length; i++) {
                int j = i + length - 1;
                dp[i][j] = length; // max steps
                
                // Try removing first element alone
                dp[i][j] = Math.min(dp[i][j], 1 + dp[i + 1][j]);
                
                // Try all splits
                for (int k = i + 1; k <= j; k++) {
                    if (arr[i] == arr[k]) {
                        int cost = (k == i + 1 ? 0 : dp[i + 1][k - 1]) + dp[k][j];
                        dp[i][j] = Math.min(dp[i][j], cost);
                    }
                }
            }
        }
        
        return dp[0][n - 1];
    }
}
