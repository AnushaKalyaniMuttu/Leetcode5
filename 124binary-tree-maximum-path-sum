/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   private int maxSum = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        // Start the DFS traversal
        dfs(root);
        return maxSum;
    }

    // Helper method to perform DFS and calculate the maximum path sum
    private int dfs(TreeNode node) {
        if (node == null) {
            return 0;
        }

        // Recursively get the maximum path sum from the left and right subtrees.
        int left = Math.max(dfs(node.left), 0);  // If negative, we discard it by setting to 0
        int right = Math.max(dfs(node.right), 0); // If negative, we discard it by setting to 0

        // Compute the current path sum where the current node is the highest point.
        int currentSum = node.val + left + right;

        // Update the global maximum sum if the current path sum is larger.
        maxSum = Math.max(maxSum, currentSum);

        // Return the maximum path sum starting from this node, considering only one child (either left or right).
        return node.val + Math.max(left, right);
    }
}
