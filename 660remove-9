import java.util.*;

public class Solution {
    public int[][] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        int[] parent = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1];
            if (find(parent, u) == find(parent, v)) {
                return new int[][] {edge};
            }
            union(parent, u, v);
        }
        
        return new int[0][0];
    }
    
    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }
    
    private void union(int[] parent, int x, int y) {
        parent[find(parent, x)] = find(parent, y);
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[][] edges = {{1,2}, {1,3}, {2,3}};
        System.out.println(Arrays.deepToString(sol.findRedundantConnection(edges))); // Output: [[2,3]]
    }
}
