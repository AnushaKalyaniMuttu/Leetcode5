import java.util.Deque;
import java.util.LinkedList;

class FrontMiddleBackQueue {
    Deque<Integer> front;
    Deque<Integer> back;

    public FrontMiddleBackQueue() {
        front = new LinkedList<>();
        back = new LinkedList<>();
    }

    private void rebalance() {
        // Keep front size = back size or front size = back size + 1
        while (front.size() > back.size() + 1) {
            back.addFirst(front.removeLast());
        }
        while (front.size() < back.size()) {
            front.addLast(back.removeFirst());
        }
    }

    public void pushFront(int val) {
        front.addFirst(val);
        rebalance();
    }

    public void pushMiddle(int val) {
        if (front.size() > back.size()) {
            back.addFirst(front.removeLast());
        }
        front.addLast(val);
    }

    public void pushBack(int val) {
        back.addLast(val);
        rebalance();
    }

    public int popFront() {
        if (front.isEmpty() && back.isEmpty()) return -1;

        int val = !front.isEmpty() ? front.removeFirst() : back.removeFirst();
        rebalance();
        return val;
    }

    public int popMiddle() {
        if (front.isEmpty() && back.isEmpty()) return -1;

        int val = front.removeLast();
        rebalance();
        return val;
    }

    public int popBack() {
        if (front.isEmpty() && back.isEmpty()) return -1;

        int val = !back.isEmpty() ? back.removeLast() : front.removeLast();
        rebalance();
        return val;
    }
}


/**
 * Your FrontMiddleBackQueue object will be instantiated and called as such:
 * FrontMiddleBackQueue obj = new FrontMiddleBackQueue();
 * obj.pushFront(val);
 * obj.pushMiddle(val);
 * obj.pushBack(val);
 * int param_4 = obj.popFront();
 * int param_5 = obj.popMiddle();
 * int param_6 = obj.popBack();
 */
