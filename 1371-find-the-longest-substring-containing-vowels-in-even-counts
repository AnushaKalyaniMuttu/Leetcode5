public class Solution {
    public int findTheLongestSubstring(String s) {
        int n = s.length();
        int mask = 0;
        int[] pos = new int[1 << 5]; // size 32 for 5 vowels
        Arrays.fill(pos, -1);
        pos[0] = 0; // before starting, all counts are even
        
        int maxLen = 0;
        
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c == 'a') mask ^= 1 << 0;
            else if (c == 'e') mask ^= 1 << 1;
            else if (c == 'i') mask ^= 1 << 2;
            else if (c == 'o') mask ^= 1 << 3;
            else if (c == 'u') mask ^= 1 << 4;
            
            if (pos[mask] >= 0) {
                // substring from pos[mask] to i has all vowels even
                maxLen = Math.max(maxLen, i + 1 - pos[mask]);
            } else {
                // first time this parity mask appears
                pos[mask] = i + 1;
            }
        }
        
        return maxLen;
    }
}
