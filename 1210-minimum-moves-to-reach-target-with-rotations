import java.util.*;

class Solution {
    public int minimumMoves(int[][] grid) {
        int n = grid.length;
        Queue<int[]> queue = new LinkedList<>();
        Set<String> visited = new HashSet<>();

        // Initial position: head at (0,1), tail at (0,0), horizontal orientation (0)
        queue.offer(new int[]{0, 0, 0, 0}); // x, y, orientation, steps
        visited.add("0,0,0");

        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            int x = curr[0], y = curr[1], dir = curr[2], steps = curr[3];

            // Goal position: horizontal at (n-1, n-2)
            if (x == n - 1 && y == n - 2 && dir == 0) {
                return steps;
            }

            // Move Right
            if (dir == 0) { // horizontal
                if (y + 2 < n && grid[x][y + 2] == 0) {
                    if (visited.add(x + "," + (y + 1) + ",0")) {
                        queue.offer(new int[]{x, y + 1, 0, steps + 1});
                    }
                }
            } else { // vertical
                if (y + 1 < n && grid[x][y + 1] == 0 && grid[x + 1][y + 1] == 0) {
                    if (visited.add(x + "," + (y + 1) + ",1")) {
                        queue.offer(new int[]{x, y + 1, 1, steps + 1});
                    }
                }
            }

            // Move Down
            if (dir == 0) { // horizontal
                if (x + 1 < n && grid[x + 1][y] == 0 && grid[x + 1][y + 1] == 0) {
                    if (visited.add((x + 1) + "," + y + ",0")) {
                        queue.offer(new int[]{x + 1, y, 0, steps + 1});
                    }
                }
            } else { // vertical
                if (x + 2 < n && grid[x + 2][y] == 0) {
                    if (visited.add((x + 1) + "," + y + ",1")) {
                        queue.offer(new int[]{x + 1, y, 1, steps + 1});
                    }
                }
            }

            // Rotate clockwise (horizontal → vertical)
            if (dir == 0) {
                if (x + 1 < n && grid[x + 1][y] == 0 && grid[x + 1][y + 1] == 0) {
                    if (visited.add(x + "," + y + ",1")) {
                        queue.offer(new int[]{x, y, 1, steps + 1});
                    }
                }
            }

            // Rotate counterclockwise (vertical → horizontal)
            if (dir == 1) {
                if (y + 1 < n && grid[x][y + 1] == 0 && grid[x + 1][y + 1] == 0) {
                    if (visited.add(x + "," + y + ",0")) {
                        queue.offer(new int[]{x, y, 0, steps + 1});
                    }
                }
            }
        }

        return -1;
    }
}
