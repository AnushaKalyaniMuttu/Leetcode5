import java.util.*;

public class Solution {
    public int numSubmatrixSumTarget(int[][] matrix, int target) {
        int rows = matrix.length, cols = matrix[0].length;
        int count = 0;

        // Prefix sum for each row
        for (int r = 0; r < rows; r++) {
            for (int c = 1; c < cols; c++) {
                matrix[r][c] += matrix[r][c - 1];
            }
        }

        // Fix two columns (left and right)
        for (int left = 0; left < cols; left++) {
            for (int right = left; right < cols; right++) {
                Map<Integer, Integer> map = new HashMap<>();
                map.put(0, 1); // For subarrays that directly match the target
                int currSum = 0;

                for (int r = 0; r < rows; r++) {
                    // 1D compression: sum between columns for current row
                    int rowSum = matrix[r][right] - (left > 0 ? matrix[r][left - 1] : 0);
                    currSum += rowSum;

                    count += map.getOrDefault(currSum - target, 0);
                    map.put(currSum, map.getOrDefault(currSum, 0) + 1);
                }
            }
        }

        return count;
    }
}
