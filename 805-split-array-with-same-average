import java.util.*;

public class Solution {
    public boolean splitArraySameAverage(int[] nums) {
        int n = nums.length;
        int totalSum = Arrays.stream(nums).sum();

        // Optimization: if n > 1, you can find at least one valid subset if a solution exists
        boolean[] possible = new boolean[totalSum + 1];
        possible[0] = true;
        Set<Integer>[] dp = new HashSet[n + 1];
        for (int i = 0; i <= n; i++) dp[i] = new HashSet<>();
        dp[0].add(0);

        for (int num : nums) {
            for (int i = n - 1; i >= 0; i--) {
                for (int s : dp[i]) {
                    dp[i + 1].add(s + num);
                }
            }
        }

        for (int k = 1; k < n; k++) {
            if ((totalSum * k) % n == 0) {
                int target = (totalSum * k) / n;
                if (dp[k].contains(target)) {
                    return true;
                }
            }
        }

        return false;
    }
}
