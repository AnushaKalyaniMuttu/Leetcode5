import java.util.*;

public class Solution {
    public int numSquarefulPerms(int[] nums) {
        Arrays.sort(nums);
        boolean[] used = new boolean[nums.length];
        return backtrack(nums, new ArrayList<>(), used);
    }

    private int backtrack(int[] nums, List<Integer> path, boolean[] used) {
        if (path.size() == nums.length) return 1;

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (used[i]) continue;
            if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) continue;
            if (path.size() == 0 || isPerfectSquare(path.get(path.size() - 1) + nums[i])) {
                used[i] = true;
                path.add(nums[i]);
                count += backtrack(nums, path, used);
                used[i] = false;
                path.remove(path.size() - 1);
            }
        }
        return count;
    }

    private boolean isPerfectSquare(int x) {
        int s = (int) Math.sqrt(x);
        return s * s == x;
    }
}
