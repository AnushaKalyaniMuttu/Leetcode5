class Solution {
    private List<Integer>[] nums = new List[2];

    public boolean twoSumBSTs(TreeNode root1, TreeNode root2, int target) {
        Arrays.setAll(nums, k -> new ArrayList<>());
        dfs(root1, 0);
        dfs(root2, 1);

        int i = 0, j = nums[1].size() - 1;
        while (i < nums[0].size() && j >= 0) {
            int sum = nums[0].get(i) + nums[1].get(j);
            if (sum == target) return true;
            if (sum < target) ++i;
            else --j;
        }
        return false;
    }

    private void dfs(TreeNode root, int idx) {
        if (root == null) return;
        dfs(root.left, idx);
        nums[idx].add(root.val);
        dfs(root.right, idx);
    }
}
