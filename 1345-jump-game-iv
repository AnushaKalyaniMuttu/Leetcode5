import java.util.*;

public class Solution {
    public int minJumps(int[] arr) {
        int n = arr.length;
        if (n == 1) return 0;

        // Map from value to list of indices with that value
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph.computeIfAbsent(arr[i], k -> new ArrayList<>()).add(i);
        }

        boolean[] visited = new boolean[n];
        visited[0] = true;

        Queue<Integer> queue = new LinkedList<>();
        queue.offer(0);

        int steps = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size-- > 0) {
                int index = queue.poll();

                if (index == n - 1) {
                    return steps;
                }

                // Indices with the same value
                List<Integer> sameValueIndices = graph.get(arr[index]);
                if (sameValueIndices != null) {
                    for (int nextIndex : sameValueIndices) {
                        if (!visited[nextIndex]) {
                            visited[nextIndex] = true;
                            queue.offer(nextIndex);
                        }
                    }
                    // Clear the list to avoid reprocessing
                    graph.put(arr[index], null);
                }

                // Check neighbors: index - 1 and index + 1
                if (index - 1 >= 0 && !visited[index - 1]) {
                    visited[index - 1] = true;
                    queue.offer(index - 1);
                }
                if (index + 1 < n && !visited[index + 1]) {
                    visited[index + 1] = true;
                    queue.offer(index + 1);
                }
            }
            steps++;
        }

        return -1; // Should never reach here as problem guarantees a path
    }
}
