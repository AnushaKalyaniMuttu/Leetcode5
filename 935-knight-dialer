public class Solution {
    private static final int MOD = 1_000_000_007;
    private static final int[][] MOVES = {
        {4, 6}, {6, 8}, {7, 9}, {4, 8}, {0, 3, 9}, { }, {0, 1, 7}, {2, 6}, {1, 3}, {2, 4}
    };

    public int knightDialer(int n) {
        if (n == 1) return 10;

        long[] dp = new long[10];
        Arrays.fill(dp, 1);

        for (int i = 2; i <= n; i++) {
            long[] newDp = new long[10];
            for (int j = 0; j < 10; j++) {
                for (int move : MOVES[j]) {
                    newDp[j] = (newDp[j] + dp[move]) % MOD;
                }
            }
            dp = newDp;
        }

        long result = 0;
        for (long count : dp) {
            result = (result + count) % MOD;
        }
        return (int) result;
    }
}
