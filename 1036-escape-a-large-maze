import java.util.*;

class Solution {
    private static final int BOUND = 1_000_000;
    private static final int[][] DIRS = {{0,1}, {1,0}, {0,-1}, {-1,0}};
    private static final int MAX_AREA = 20000; // Maximum enclosed area

    public boolean isEscapePossible(int[][] blocked, int[] source, int[] target) {
        Set<String> blockedSet = new HashSet<>();
        for (int[] b : blocked) {
            blockedSet.add(b[0] + "," + b[1]);
        }

        return bfs(source, target, blockedSet) && bfs(target, source, blockedSet);
    }

    private boolean bfs(int[] start, int[] goal, Set<String> blockedSet) {
        Set<String> visited = new HashSet<>();
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(start);
        visited.add(start[0] + "," + start[1]);

        while (!queue.isEmpty() && visited.size() <= MAX_AREA) {
            int[] curr = queue.poll();
            if (curr[0] == goal[0] && curr[1] == goal[1]) return true;

            for (int[] dir : DIRS) {
                int nx = curr[0] + dir[0], ny = curr[1] + dir[1];
                String key = nx + "," + ny;

                if (nx >= 0 && ny >= 0 && nx < BOUND && ny < BOUND &&
                        !blockedSet.contains(key) && !visited.contains(key)) {
                    queue.offer(new int[]{nx, ny});
                    visited.add(key);
                }
            }
        }

        // If visited more than MAX_AREA, not trapped
        return visited.size() > MAX_AREA;
    }
}
