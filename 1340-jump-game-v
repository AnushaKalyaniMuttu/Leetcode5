class Solution {
    private int[] arr;
    private int d;
    private int[] memo;

    public int maxJumps(int[] arr, int d) {
        this.arr = arr;
        this.d = d;
        int n = arr.length;
        memo = new int[n];
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, dfs(i));
        }
        return max;
    }

    private int dfs(int i) {
        if (memo[i] != 0) return memo[i];
        int n = arr.length;
        int maxJump = 1; // at least we stand at i

        // jump to the right
        for (int j = i + 1; j <= i + d && j < n; j++) {
            if (arr[j] >= arr[i]) break; // can't jump over equal or higher
            maxJump = Math.max(maxJump, 1 + dfs(j));
        }

        // jump to the left
        for (int j = i - 1; j >= i - d && j >= 0; j--) {
            if (arr[j] >= arr[i]) break;
            maxJump = Math.max(maxJump, 1 + dfs(j));
        }

        memo[i] = maxJump;
        return maxJump;
    }
}
