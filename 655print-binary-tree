/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

class Solution {
    public List<List<String>> printTree(TreeNode root) {
        int height = getHeight(root);
        int width = (1 << (height + 1)) - 1;
        List<List<String>> res = new ArrayList<>();
        
        for (int i = 0; i <= height; i++) {
            List<String> row = new ArrayList<>(Collections.nCopies(width, ""));
            res.add(row);
        }
        
        fill(res, root, 0, 0, width - 1);
        return res;
    }

    private void fill(List<List<String>> res, TreeNode node, int row, int left, int right) {
        if (node == null) return;
        int mid = (left + right) / 2;
        res.get(row).set(mid, String.valueOf(node.val));
        fill(res, node.left, row + 1, left, mid - 1);
        fill(res, node.right, row + 1, mid + 1, right);
    }

    private int getHeight(TreeNode root) {
        return root == null ? -1 : 1 + Math.max(getHeight(root.left), getHeight(root.right));
    }
}
