/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // Traverse the tree starting from the root
        while (root != null) {
            // If both p and q are smaller than root, move to the left subtree
            if (p.val < root.val && q.val < root.val) {
                root = root.left;
            }
            // If both p and q are greater than root, move to the right subtree
            else if (p.val > root.val && q.val > root.val) {
                root = root.right;
            }
            // If p and q are on opposite sides or one is the root, root is LCA
            else {
                return root;
            }
        }
        return null; // In case the tree is empty (though the problem states root is not null)
    }
}
