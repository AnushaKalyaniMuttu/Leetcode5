class Solution {
    public void gameOfLife(int[][] board) {
        int m = board.length, n = board[0].length;

        // Directions array for 8 neighbors
        int[][] directions = {{-1, -1}, {-1, 0}, {-1, 1}, 
                              {0, -1},        {0, 1}, 
                              {1, -1}, {1, 0}, {1, 1}};

        // First pass: Mark the changes
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int liveNeighbors = 0;

                // Count live neighbors
                for (int[] d : directions) {
                    int x = i + d[0], y = j + d[1];
                    if (x >= 0 && x < m && y >= 0 && y < n && Math.abs(board[x][y]) == 1) {
                        liveNeighbors++;
                    }
                }

                // Apply the rules
                if (board[i][j] == 1 && (liveNeighbors < 2 || liveNeighbors > 3)) {
                    board[i][j] = -1; // 1 → 0 (dies)
                }
                if (board[i][j] == 0 && liveNeighbors == 3) {
                    board[i][j] = 2; // 0 → 1 (comes to life)
                }
            }
        }

        // Second pass: Finalize updates
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == -1) board[i][j] = 0; // Dead
                if (board[i][j] == 2) board[i][j] = 1; // Alive
            }
        }
    }
}
