import java.util.*;

class Solution {
    public int findLongestPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0) return 0;
        
        int rows = matrix.length, cols = matrix[0].length;
        int[][] memo = new int[rows][cols];
        int maxPath = 0;
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                maxPath = Math.max(maxPath, dfs(matrix, i, j, memo));
            }
        }
        
        return maxPath;
    }
    
    private int dfs(int[][] matrix, int i, int j, int[][] memo) {
        if (memo[i][j] != 0) return memo[i][j];
        
        int[] directions = {-1, 0, 1, 0, -1};
        int maxLength = 1;
        
        for (int d = 0; d < 4; d++) {
            int x = i + directions[d], y = j + directions[d + 1];
            if (x >= 0 && x < matrix.length && y >= 0 && y < matrix[0].length && matrix[x][y] > matrix[i][j]) {
                maxLength = Math.max(maxLength, 1 + dfs(matrix, x, y, memo));
            }
        }
        
        memo[i][j] = maxLength;
        return maxLength;
    }
}
