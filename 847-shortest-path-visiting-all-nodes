import java.util.*;

public class Solution {
    public int shortestPathLength(int[][] graph) {
        int n = graph.length;
        int allVisitedMask = (1 << n) - 1;  // All nodes visited (bitmask)

        // Queue for BFS: stores (node, visited mask, steps taken)
        Queue<int[]> queue = new LinkedList<>();
        // Set to track visited (node, visited mask) pairs to avoid cycles
        boolean[][] visited = new boolean[n][1 << n];

        // Initialize the BFS with all nodes as starting points
        for (int i = 0; i < n; i++) {
            queue.offer(new int[]{i, 1 << i, 0});  // (node, visited mask, steps)
            visited[i][1 << i] = true;
        }

        // BFS
        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            int node = curr[0];
            int visitedMask = curr[1];
            int steps = curr[2];

            // If all nodes are visited, return the number of steps
            if (visitedMask == allVisitedMask) {
                return steps;
            }

            // Explore all the neighbors of the current node
            for (int neighbor : graph[node]) {
                int nextVisitedMask = visitedMask | (1 << neighbor);
                // If this state hasn't been visited before, add it to the queue
                if (!visited[neighbor][nextVisitedMask]) {
                    visited[neighbor][nextVisitedMask] = true;
                    queue.offer(new int[]{neighbor, nextVisitedMask, steps + 1});
                }
            }
        }

        // If we exit the loop without visiting all nodes, something went wrong
        return -1;
    }

}
