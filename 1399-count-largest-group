class Solution {
    public int[] countLargestGroup(int n) {
        // HashMap to store the count of numbers for each digit sum
        Map<Integer, Integer> groupCount = new HashMap<>();
        
        // Step 1: Iterate through all numbers from 1 to n
        for (int i = 1; i <= n; i++) {
            int sumOfDigits = sumDigits(i);  // Get the sum of digits of the number
            groupCount.put(sumOfDigits, groupCount.getOrDefault(sumOfDigits, 0) + 1);
        }
        
        // Step 2: Find the largest group size and how many groups have that size
        int maxSize = 0;
        int maxCount = 0;
        
        for (int count : groupCount.values()) {
            if (count > maxSize) {
                maxSize = count;
                maxCount = 1;  // Reset count to 1 as we've found a larger group
            } else if (count == maxSize) {
                maxCount++;  // Increment count for groups of the same size
            }
        }
        
        // Step 3: Return the result
        return new int[] {maxSize, maxCount};
    }
    
    // Helper function to calculate the sum of digits of a number
    private int sumDigits(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }
}
