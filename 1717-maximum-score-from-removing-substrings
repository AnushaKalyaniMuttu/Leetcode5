class Solution {
    public int maximumGain(String s, int x, int y) {
        // Decide which substring to remove first (higher gain)
        if (x < y) {
            // swap so that we always treat “first removal” as the more profitable one
            return gain(s, "ba", y, "ab", x);
        } else {
            return gain(s, "ab", x, "ba", y);
        }
    }

    private int gain(String s, String sub1, int point1, String sub2, int point2) {
        int points = 0;
        // First pass: remove sub1 greedily
        Deque<Character> stack1 = new ArrayDeque<>();
        for (char c : s.toCharArray()) {
            if (!stack1.isEmpty() 
                && stack1.peekLast() == sub1.charAt(0) 
                && c == sub1.charAt(1)) {
                // matched the pattern, remove it
                stack1.pollLast();
                points += point1;
            } else {
                stack1.addLast(c);
            }
        }

        // Second pass: remove sub2 from what’s left
        Deque<Character> stack2 = new ArrayDeque<>();
        while (!stack1.isEmpty()) {
            char c = stack1.pollFirst();
            if (!stack2.isEmpty() 
                && stack2.peekLast() == sub2.charAt(0) 
                && c == sub2.charAt(1)) {
                stack2.pollLast();
                points += point2;
            } else {
                stack2.addLast(c);
            }
        }

        return points;
    }
}
