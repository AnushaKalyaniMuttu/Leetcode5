import java.util.*;

class Solution {
    public int countPalindromicSubsequence(String s) {
        int n = s.length();
        int[][] prefix = new int[n][26]; // prefix[i][c] = count of char c up to i
        boolean[][] seen = new boolean[26][26]; // seen[c][x] -> c_x_c pattern

        // Build prefix character frequency
        for (int i = 0; i < n; i++) {
            if (i > 0) {
                for (int j = 0; j < 26; j++) {
                    prefix[i][j] = prefix[i - 1][j];
                }
            }
            prefix[i][s.charAt(i) - 'a']++;
        }

        // First and last occurrence of each character
        int[] first = new int[26];
        int[] last = new int[26];
        Arrays.fill(first, -1);
        Arrays.fill(last, -1);

        for (int i = 0; i < n; i++) {
            int c = s.charAt(i) - 'a';
            if (first[c] == -1) first[c] = i;
            last[c] = i;
        }

        // For each character a-z
        for (int c = 0; c < 26; c++) {
            if (first[c] != -1 && last[c] > first[c]) {
                // Count all unique middle characters between first and last occurrence of c
                for (int x = 0; x < 26; x++) {
                    int count = prefix[last[c] - 1][x] - prefix[first[c]][x];
                    if (count > 0) {
                        seen[c][x] = true;
                    }
                }
            }
        }

        // Count total unique (c,x,c) combinations
        int count = 0;
        for (int c = 0; c < 26; c++) {
            for (int x = 0; x < 26; x++) {
                if (seen[c][x]) count++;
            }
        }

        return count;
    }
}
