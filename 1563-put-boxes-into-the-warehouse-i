class Solution {
    public int stoneGameV(int[] stoneValue) {
        int n = stoneValue.length;
        int[][] dp = new int[n][n];
        int[] prefix = new int[n + 1];

        // Compute prefix sum for fast range sum calculation
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + stoneValue[i];
        }

        return dfs(0, n - 1, dp, prefix);
    }

    private int dfs(int left, int right, int[][] dp, int[] prefix) {
        if (left == right) return 0;
        if (dp[left][right] != 0) return dp[left][right];

        int maxScore = 0;

        for (int i = left; i < right; i++) {
            int leftSum = prefix[i + 1] - prefix[left];
            int rightSum = prefix[right + 1] - prefix[i + 1];

            if (leftSum < rightSum) {
                maxScore = Math.max(maxScore, leftSum + dfs(left, i, dp, prefix));
            } else if (leftSum > rightSum) {
                maxScore = Math.max(maxScore, rightSum + dfs(i + 1, right, dp, prefix));
            } else {
                maxScore = Math.max(maxScore, leftSum + Math.max(
                    dfs(left, i, dp, prefix),
                    dfs(i + 1, right, dp, prefix)
                ));
            }
        }

        dp[left][right] = maxScore;
        return maxScore;
    }
}
