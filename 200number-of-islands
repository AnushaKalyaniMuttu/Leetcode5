public class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        
        int numRows = grid.length;
        int numCols = grid[0].length;
        int islandCount = 0;
        
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                if (grid[i][j] == '1') {
                    // We found an unvisited land cell, start DFS
                    islandCount++;
                    dfs(grid, i, j, numRows, numCols);
                }
            }
        }
        
        return islandCount;
    }

    private void dfs(char[][] grid, int i, int j, int numRows, int numCols) {
        // Check boundary conditions
        if (i < 0 || i >= numRows || j < 0 || j >= numCols || grid[i][j] == '0') {
            return;
        }
        
        // Mark the current cell as visited
        grid[i][j] = '0';
        
        // Perform DFS in all four directions (up, down, left, right)
        dfs(grid, i + 1, j, numRows, numCols);  // Down
        dfs(grid, i - 1, j, numRows, numCols);  // Up
        dfs(grid, i, j + 1, numRows, numCols);  // Right
        dfs(grid, i, j - 1, numRows, numCols);  // Left
    }
}
