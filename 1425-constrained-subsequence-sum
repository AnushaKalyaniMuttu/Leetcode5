class Solution {
    public int constrainedSubsetSum(int[] nums, int k) {
        int n = nums.length;
        int[] dp = new int[n];
        Deque<Integer> deque = new ArrayDeque<>();
        dp[0] = nums[0];
        deque.add(0);
        int result = dp[0];

        for (int i = 1; i < n; i++) {
            // Remove indices out of the window
            while (!deque.isEmpty() && deque.peekFirst() < i - k) {
                deque.pollFirst();
            }

            // Max of previous k dp values or 0 if all are negative
            dp[i] = Math.max(nums[i], nums[i] + dp[deque.peekFirst()]);
            result = Math.max(result, dp[i]);

            // Maintain decreasing deque
            while (!deque.isEmpty() && dp[i] >= dp[deque.peekLast()]) {
                deque.pollLast();
            }

            deque.addLast(i);
        }

        return result;
    }
}
