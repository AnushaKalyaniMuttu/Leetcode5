import java.util.*;

class Solution {
    public int minTotalDistance(int[][] grid) {
        List<Integer> rows = new ArrayList<>();
        List<Integer> cols = new ArrayList<>();

        // Step 1: Collect all row and column indices of people (1s)
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) {
                    rows.add(i);
                    cols.add(j);
                }
            }
        }

        // Step 2: Find the median row and median column
        int medianRow = findMedian(rows);
        Collections.sort(cols);
        int medianCol = findMedian(cols);

        // Step 3: Compute Manhattan distance sum
        return getDistance(rows, medianRow) + getDistance(cols, medianCol);
    }

    private int findMedian(List<Integer> list) {
        return list.get(list.size() / 2);
    }

    private int getDistance(List<Integer> points, int median) {
        int distance = 0;
        for (int point : points) {
            distance += Math.abs(point - median);
        }
        return distance;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[][] grid = {
            {1, 0, 0, 0, 1},
            {0, 0, 0, 0, 0},
            {0, 0, 1, 0, 0}
        };
        System.out.println(sol.minTotalDistance(grid)); // Output: 6
    }
}
