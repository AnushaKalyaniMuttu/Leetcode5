/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

public class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        findPaths(root, "", result);
        return result;
    }

    private void findPaths(TreeNode node, String path, List<String> result) {
        // If the current node is a leaf, add the path to the result
        if (node.left == null && node.right == null) {
            result.add(path + node.val);
            return;
        }
        
        // Recursively go to the left and right child
        if (node.left != null) {
            findPaths(node.left, path + node.val + "->", result);
        }
        if (node.right != null) {
            findPaths(node.right, path + node.val + "->", result);
        }
    }
}
