import java.util.*;

class Solution {
    private static final int[][] directions = {
        {1, 2}, {2, 1}, {-1, 2}, {-2, 1},
        {-1, -2}, {-2, -1}, {1, -2}, {2, -1}
    };

    public int minKnightMoves(int x, int y) {
        x = Math.abs(x);
        y = Math.abs(y);

        Queue<int[]> queue = new LinkedList<>();
        Set<String> visited = new HashSet<>();
        queue.offer(new int[]{0, 0});
        visited.add("0,0");

        int steps = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();

            for (int i = 0; i < size; i++) {
                int[] pos = queue.poll();
                int currX = pos[0], currY = pos[1];

                if (currX == x && currY == y) return steps;

                for (int[] d : directions) {
                    int nextX = currX + d[0];
                    int nextY = currY + d[1];

                    // Use symmetry to reduce search space
                    if (nextX >= -1 && nextY >= -1 && !visited.contains(nextX + "," + nextY)) {
                        queue.offer(new int[]{nextX, nextY});
                        visited.add(nextX + "," + nextY);
                    }
                }
            }
            steps++;
        }

        return -1; // Should never reach here
    }
}
