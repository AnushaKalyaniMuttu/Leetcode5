// LeetCode 1634. Add Two Polynomials Represented as Linked Lists
class AddTwoPolynomialsRepresentedAsLinkedLists {
    // Definition for polynomial singly-linked list.
    static class PolyNode {
        int coefficient, power;
        PolyNode next;

        PolyNode() {}
        PolyNode(int coefficient, int power) {
            this.coefficient = coefficient;
            this.power = power;
        }
        PolyNode(int coefficient, int power, PolyNode next) {
            this.coefficient = coefficient;
            this.power = power;
            this.next = next;
        }
    }

    public PolyNode addPoly(PolyNode poly1, PolyNode poly2) {
        PolyNode dummy = new PolyNode(0, 0);
        PolyNode curr = dummy;

        while (poly1 != null && poly2 != null) {
            if (poly1.power == poly2.power) {
                int sumCoeff = poly1.coefficient + poly2.coefficient;
                if (sumCoeff != 0) {
                    curr.next = new PolyNode(sumCoeff, poly1.power);
                    curr = curr.next;
                }
                poly1 = poly1.next;
                poly2 = poly2.next;
            } else if (poly1.power > poly2.power) {
                curr.next = new PolyNode(poly1.coefficient, poly1.power);
                curr = curr.next;
                poly1 = poly1.next;
            } else {
                curr.next = new PolyNode(poly2.coefficient, poly2.power);
                curr = curr.next;
                poly2 = poly2.next;
            }
        }

        // Attach the remaining terms
        while (poly1 != null) {
            curr.next = new PolyNode(poly1.coefficient, poly1.power);
            curr = curr.next;
            poly1 = poly1.next;
        }
        while (poly2 != null) {
            curr.next = new PolyNode(poly2.coefficient, poly2.power);
            curr = curr.next;
            poly2 = poly2.next;
        }

        return dummy.next;
    }
}
