import java.util.Arrays;
import java.util.PriorityQueue;

public class Solution {
    public int maxEvents(int[][] events) {
        // Sort events by start day
        Arrays.sort(events, (a, b) -> a[0] - b[0]);

        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        int day = 0;
        int eventIndex = 0;
        int attended = 0;
        int n = events.length;

        // Find the last day possible
        int lastDay = 0;
        for (int[] e : events) {
            lastDay = Math.max(lastDay, e[1]);
        }

        // Iterate through each day
        for (day = 1; day <= lastDay; day++) {
            // Add all events starting today
            while (eventIndex < n && events[eventIndex][0] == day) {
                minHeap.offer(events[eventIndex][1]);
                eventIndex++;
            }

            // Remove events that already ended
            while (!minHeap.isEmpty() && minHeap.peek() < day) {
                minHeap.poll();
            }

            // Attend the event that ends earliest
            if (!minHeap.isEmpty()) {
                minHeap.poll();
                attended++;
            }
        }

        return attended;
    }
}
