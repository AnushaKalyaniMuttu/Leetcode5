import java.util.HashMap;

class Solution {
    public int longestWPI(int[] hours) {
        int maxLength = 0;
        int prefixSum = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, -1); // Base case: prefix sum 0 at index -1

        for (int i = 0; i < hours.length; i++) {
            prefixSum += (hours[i] > 8) ? 1 : -1;

            if (prefixSum > 0) {
                maxLength = i + 1;
            } else {
                if (!map.containsKey(prefixSum)) {
                    map.put(prefixSum, i);
                }
                if (map.containsKey(prefixSum - 1)) {
                    maxLength = Math.max(maxLength, i - map.get(prefixSum - 1));
                }
            }
        }
        return maxLength;
    }
}
