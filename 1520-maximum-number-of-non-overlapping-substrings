import java.util.*;

class Solution {
    public List<String> maxNumOfSubstrings(String s) {
        int n = s.length();
        int[] left = new int[26];
        int[] right = new int[26];
        Arrays.fill(left, n);
        Arrays.fill(right, -1);

        // Record the first and last positions of each character
        for (int i = 0; i < n; i++) {
            int c = s.charAt(i) - 'a';
            left[c] = Math.min(left[c], i);
            right[c] = Math.max(right[c], i);
        }

        List<int[]> intervals = new ArrayList<>();

        // For each character, try to find the smallest valid substring
        for (int i = 0; i < 26; i++) {
            if (right[i] == -1) continue;  // char not in s

            int start = left[i];
            int end = right[i];

            boolean valid = true;
            for (int j = start; j <= end; j++) {
                int c = s.charAt(j) - 'a';
                if (left[c] < start) {
                    valid = false;
                    break;
                }
                end = Math.max(end, right[c]);
            }

            if (valid) {
                intervals.add(new int[]{start, end});
            }
        }

        // Sort intervals by their end to apply greedy selection
        intervals.sort((a, b) -> Integer.compare(a[1], b[1]));

        List<String> result = new ArrayList<>();
        int prevEnd = -1;

        // Greedy select intervals
        for (int[] interval : intervals) {
            if (interval[0] > prevEnd) {
                result.add(s.substring(interval[0], interval[1] + 1));
                prevEnd = interval[1];
            }
        }

        return result;
    }
}
