import java.util.*;

class Solution {
    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {
        // Create a list to store all edges (pipes and virtual edges for wells)
        List<int[]> edges = new ArrayList<>();
        
        // Add virtual edges from the central node (0) to each house
        for (int i = 0; i < n; i++) {
            edges.add(new int[]{0, i + 1, wells[i]});
        }
        
        // Add the given pipes to the edges list
        for (int[] pipe : pipes) {
            edges.add(pipe);
        }
        
        // Sort edges by cost
        edges.sort(Comparator.comparingInt(a -> a[2]));
        
        // Initialize Union-Find data structure
        int[] parent = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
        
        // Helper function to find the root of a node
        int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }
        
        // Helper function to union two sets
        void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX != rootY) {
                parent[rootX] = rootY;
            }
        }
        
        // Kruskal's algorithm to find the MST
        int totalCost = 0;
        int edgesUsed = 0;
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int cost = edge[2];
            
            if (find(u) != find(v)) {
                union(u, v);
                totalCost += cost;
                edgesUsed++;
                if (edgesUsed == n) {
                    break;
                }
            }
        }
        
        return totalCost;
    }
}
