public class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        
        // Edge case: If there are no prices or if no transactions can be made
        if (n == 0 || k == 0) return 0;
        
        // If we can make unlimited transactions, it's the same as the best profit
        if (k >= n / 2) {
            int profit = 0;
            for (int i = 1; i < n; i++) {
                if (prices[i] > prices[i - 1]) {
                    profit += prices[i] - prices[i - 1];
                }
            }
            return profit;
        }

        // DP table: dp[t][i] is the max profit for at most t transactions by day i
        int[][] dp = new int[k + 1][n];
        
        // Iterate over the number of transactions
        for (int t = 1; t <= k; t++) {
            // Variable to track the maximum difference (max of dp[t-1][j] - prices[j])
            int maxDiff = -prices[0];
            
            // Iterate over the days (prices)
            for (int i = 1; i < n; i++) {
                // The profit at most t transactions by day i is either:
                // - not doing any transaction on day i, i.e., dp[t][i-1]
                // - selling on day i, which is prices[i] - prices[j] + dp[t-1][j]
                dp[t][i] = Math.max(dp[t][i-1], prices[i] + maxDiff);
                
                // Update the maxDiff for future transactions
                maxDiff = Math.max(maxDiff, dp[t-1][i] - prices[i]);
            }
        }
        
        return dp[k][n-1];  // The maximum profit with at most k transactions on the last day
    }
}
