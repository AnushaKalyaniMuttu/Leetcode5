public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        // Edge case: If either list is empty, there is no intersection
        if (headA == null || headB == null) {
            return null;
        }
        
        // Initialize two pointers for both lists
        ListNode ptrA = headA;
        ListNode ptrB = headB;
        
        // Traverse both lists; when a pointer reaches the end of a list, move it to the head of the other list
        // By doing this, the two pointers will meet at the intersection point after at most (m + n) steps
        while (ptrA != ptrB) {
            // Move pointers to the head of the other list when they reach the end
            ptrA = (ptrA == null) ? headB : ptrA.next;
            ptrB = (ptrB == null) ? headA : ptrB.next;
        }
        
        // Either both pointers meet at the intersection node, or they both reach null
        return ptrA;
    }
}
