class Solution {
   public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] flight : flights) {
            graph.computeIfAbsent(flight[0], x -> new ArrayList<>()).add(new int[]{flight[1], flight[2]});
        }

        int[][] dist = new int[n][k + 2]; // dist[city][stops] = min cost
        for (int[] row : dist) Arrays.fill(row, Integer.MAX_VALUE);
        dist[src][0] = 0;

        Queue<int[]> pq = new LinkedList<>();
        pq.offer(new int[]{src, 0, 0}); // {city, stops, cost}

        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            int city = curr[0], stops = curr[1], cost = curr[2];

            if (stops > k) continue;

            for (int[] nei : graph.getOrDefault(city, new ArrayList<>())) {
                int next = nei[0], price = nei[1];
                int newCost = cost + price;

                if (newCost < dist[next][stops + 1]) {
                    dist[next][stops + 1] = newCost;
                    pq.offer(new int[]{next, stops + 1, newCost});
                }
            }
        }

        int min = Integer.MAX_VALUE;
        for (int i = 0; i <= k + 1; i++) {
            min = Math.min(min, dist[dst][i]);
        }

        return min == Integer.MAX_VALUE ? -1 : min;
    }
}
