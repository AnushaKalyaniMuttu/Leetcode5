import java.util.*;
class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums1 == null || nums2 == null || nums1.length == 0 || nums2.length == 0 || k <= 0) {
            return result;
        }

        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> (nums1[a[0]] + nums2[a[1]]) - (nums1[b[0]] + nums2[b[1]]));
        
        // Initialize the heap with pairs (0, j) where j ranges from 0 to Math.min(nums2.length, k)
        for (int i = 0; i < Math.min(nums2.length, k); i++) {
            minHeap.offer(new int[] {0, i});
        }

        while (k > 0 && !minHeap.isEmpty()) {
            int[] pair = minHeap.poll();
            int idx1 = pair[0], idx2 = pair[1];
            result.add(Arrays.asList(nums1[idx1], nums2[idx2]));
            
            if (idx1 + 1 < nums1.length) {
                minHeap.offer(new int[] {idx1 + 1, idx2});
            }
            k--;
        }
        
        return result;
    }
}
