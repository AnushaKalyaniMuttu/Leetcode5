
class Solution {
    private static final int[][] directions = {
        {-1, -1}, {-1, 0}, {-1, 1}, {0, -1},
        {0, 1}, {1, -1}, {1, 0}, {1, 1}
    };

    public char[][] updateBoard(char[][] board, int[] click) {
        int row = click[0], col = click[1];

        if (board[row][col] == 'M') {
            board[row][col] = 'X';
        } else {
            dfs(board, row, col);
        }

        return board;
    }

    private void dfs(char[][] board, int r, int c) {
        if (r < 0 || c < 0 || r >= board.length || c >= board[0].length || board[r][c] != 'E') return;

        int mines = countMines(board, r, c);
        if (mines > 0) {
            board[r][c] = (char) (mines + '0');
        } else {
            board[r][c] = 'B';
            for (int[] dir : directions) {
                dfs(board, r + dir[0], c + dir[1]);
            }
        }
    }

    private int countMines(char[][] board, int r, int c) {
        int count = 0;
        for (int[] dir : directions) {
            int nr = r + dir[0], nc = c + dir[1];
            if (nr >= 0 && nc >= 0 && nr < board.length && nc < board[0].length && board[nr][nc] == 'M') {
                count++;
            }
        }
        return count;
    }
}
