import java.util.*;

public class Solution {
    public List<List<Integer>> reconstructMatrix(int upper, int lower, int[] colsum) {
        int n = colsum.length;
        int[] upperRow = new int[n];
        int[] lowerRow = new int[n];
        
        // First assign columns with colsum=2
        for (int i = 0; i < n; i++) {
            if (colsum[i] == 2) {
                upperRow[i] = 1;
                lowerRow[i] = 1;
                upper--;
                lower--;
                if (upper < 0 || lower < 0) return Collections.emptyList();
            }
        }
        
        // Assign columns with colsum=1
        for (int i = 0; i < n; i++) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    upperRow[i] = 1;
                    upper--;
                } else if (lower > 0) {
                    lowerRow[i] = 1;
                    lower--;
                } else {
                    return Collections.emptyList();
                }
            }
        }
        
        if (upper == 0 && lower == 0) {
            List<Integer> upperList = new ArrayList<>();
            List<Integer> lowerList = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                upperList.add(upperRow[i]);
                lowerList.add(lowerRow[i]);
            }
            return Arrays.asList(upperList, lowerList);
        }
        
        return Collections.emptyList();
    }
}
