public class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        if (n == 0) return "";

        // Create a 2D array to store whether a substring s[i..j] is a palindrome
        boolean[][] dp = new boolean[n][n];
        String longest = "";

        // Iterate over all possible substrings
        for (int len = 1; len <= n; len++) {  // length of substring
            for (int i = 0; i <= n - len; i++) {  // starting index of substring
                int j = i + len - 1;  // ending index of substring
                if (s.charAt(i) == s.charAt(j)) {  // check if first and last characters are the same
                    if (len == 1 || len == 2) {
                        dp[i][j] = true;  // single char or two chars that are the same are palindromes
                    } else {
                        dp[i][j] = dp[i + 1][j - 1];  // check the inner substring
                    }
                }

                // Update the longest palindrome substring
                if (dp[i][j] && len > longest.length()) {
                    longest = s.substring(i, j + 1);
                }
            }
        }

        return longest;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        System.out.println(sol.longestPalindrome("babad"));  // Output: "bab" or "aba"
        System.out.println(sol.longestPalindrome("cbbd"));   // Output: "bb"
    }
}
