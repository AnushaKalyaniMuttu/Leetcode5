class Solution {
    public double findMaxAverage(int[] nums, int k) {
        // Set initial bounds for binary search.
        double lo = Integer.MAX_VALUE, hi = Integer.MIN_VALUE;
        for (int num : nums) {
            lo = Math.min(lo, num);
            hi = Math.max(hi, num);
        }
        
        // Precision for the binary search.
        double eps = 1e-5;
        while (hi - lo > eps) {
            double mid = (lo + hi) / 2;
            if (canFind(nums, k, mid)) {
                lo = mid;
            } else {
                hi = mid;
            }
        }
        return lo;
    }
    
    // Helper method to check if there exists a subarray with length >= k that has average >= target.
    private boolean canFind(int[] nums, int k, double target) {
        double sum = 0, prevSum = 0;
        double minPrevSum = 0;
        
        // Calculate the sum for the first k elements (transformed by subtracting target).
        for (int i = 0; i < k; i++) {
            sum += nums[i] - target;
        }
        if (sum >= 0) return true;
        
        // Try to find a subarray with average >= target.
        for (int i = k; i < nums.length; i++) {
            sum += nums[i] - target;
            prevSum += nums[i - k] - target;
            minPrevSum = Math.min(minPrevSum, prevSum);
            if (sum - minPrevSum >= 0) return true;
        }
        
        return false;
    }
}
