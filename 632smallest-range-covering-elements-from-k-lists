import java.util.*;

class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        PriorityQueue<int[]> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        int max = Integer.MIN_VALUE;
        int start = 0, end = Integer.MAX_VALUE;

        // Add the first element of each list into the heap
        for (int i = 0; i < nums.size(); i++) {
            int value = nums.get(i).get(0);
            minHeap.offer(new int[]{value, i, 0});
            max = Math.max(max, value);
        }

        // Process the heap
        while (minHeap.size() == nums.size()) {
            int[] minElement = minHeap.poll();
            int min = minElement[0], row = minElement[1], col = minElement[2];

            if (max - min < end - start) {
                start = min;
                end = max;
            }

            // Move to the next element in the same row (list)
            if (col + 1 < nums.get(row).size()) {
                int nextValue = nums.get(row).get(col + 1);
                minHeap.offer(new int[]{nextValue, row, col + 1});
                max = Math.max(max, nextValue);
            } else {
                break; // One of the lists is exhausted
            }
        }

        return new int[]{start, end};
    }
}
