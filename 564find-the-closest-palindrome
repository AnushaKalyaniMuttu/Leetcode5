class Solution {
    public String nearestPalindromic(String n) {
        int len = n.length();
        if (len == 1) return String.valueOf(Integer.parseInt(n) - 1); // Handle single-digit cases
        
        long num = Long.parseLong(n);
        long[] candidates = new long[5];

        // 1. Edge case palindromes
        candidates[0] = (long) Math.pow(10, len - 1) - 1; // 999..999 (one less digit)
        candidates[1] = (long) Math.pow(10, len) + 1;     // 100..001 (one more digit)

        // 2. Generate palindromes based on the first half of the number
        long prefix = Long.parseLong(n.substring(0, (len + 1) / 2));

        candidates[2] = getPalindrome(prefix, len % 2 == 0);     // Normal case
        candidates[3] = getPalindrome(prefix - 1, len % 2 == 0); // Decrement prefix
        candidates[4] = getPalindrome(prefix + 1, len % 2 == 0); // Increment prefix

        // Find the closest palindrome
        long closest = -1;
        for (long candidate : candidates) {
            if (candidate == num) continue; // Ignore the input itself
            if (closest == -1 || Math.abs(candidate - num) < Math.abs(closest - num) ||
                (Math.abs(candidate - num) == Math.abs(closest - num) && candidate < closest)) {
                closest = candidate;
            }
        }
        
        return String.valueOf(closest);
    }

    private long getPalindrome(long half, boolean isEven) {
        String firstHalf = String.valueOf(half);
        String secondHalf = new StringBuilder(firstHalf).reverse().toString();
        return Long.parseLong(firstHalf + (isEven ? secondHalf : secondHalf.substring(1)));
    }
}
