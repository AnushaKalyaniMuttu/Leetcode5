class Solution {
    public int numMusicPlaylists(int n, int goal, int k) {
        final int MOD = 1000000007;
        
        // DP table where dp[i][j] is the number of ways to form a playlist of length i
        // with exactly j distinct songs.
        long[][] dp = new long[goal + 1][n + 1];
        
        // Base case: 1 way to create a playlist of length 0 with 0 distinct songs (empty playlist)
        dp[0][0] = 1;
        
        // Iterate through all lengths of the playlist from 1 to goal
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                // Add a new song, we can choose from the j distinct songs used so far
                dp[i][j] = dp[i - 1][j - 1] * (n - (j - 1)) % MOD;
                
                // Add an already used song, we can choose from the j distinct songs, but
                // it can't be one of the last k songs.
                if (j > k) {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j] * (j - k)) % MOD;
                }
            }
        }
        
        // The answer is the number of ways to form a playlist of length goal with exactly n distinct songs.
        return (int) dp[goal][n];
    }
}
