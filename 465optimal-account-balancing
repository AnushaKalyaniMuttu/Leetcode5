import java.util.*;

class Solution {
    public int minTransfers(int[][] transactions) {
        Map<Integer, Integer> balanceMap = new HashMap<>();
        
        // Compute net balance for each person
        for (int[] t : transactions) {
            balanceMap.put(t[0], balanceMap.getOrDefault(t[0], 0) - t[2]);
            balanceMap.put(t[1], balanceMap.getOrDefault(t[1], 0) + t[2]);
        }

        // Convert balance map to an array (only non-zero balances)
        List<Integer> balances = new ArrayList<>();
        for (int amount : balanceMap.values()) {
            if (amount != 0) balances.add(amount);
        }

        return backtrack(balances, 0);
    }

    private int backtrack(List<Integer> balances, int start) {
        while (start < balances.size() && balances.get(start) == 0) {
            start++; // Skip settled accounts
        }
        if (start == balances.size()) return 0;

        int minTransactions = Integer.MAX_VALUE;
        for (int i = start + 1; i < balances.size(); i++) {
            if (balances.get(i) * balances.get(start) < 0) { // Opposite signs
                balances.set(i, balances.get(i) + balances.get(start)); // Try settling
                minTransactions = Math.min(minTransactions, 1 + backtrack(balances, start + 1));
                balances.set(i, balances.get(i) - balances.get(start)); // Backtrack
            }
        }
        return minTransactions;
    }
}
