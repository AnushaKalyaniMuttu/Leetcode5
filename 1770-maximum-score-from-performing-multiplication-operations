class Solution {
    public int maximumScore(int[] nums, int[] multipliers) {
        int n = nums.length, m = multipliers.length;
        Integer[][] memo = new Integer[m + 1][m + 1];
        return dfs(0, 0, nums, multipliers, memo);
    }

    private int dfs(int left, int i, int[] nums, int[] mult, Integer[][] memo) {
        if (i == mult.length) return 0; // base case: used all multipliers
        if (memo[left][i] != null) return memo[left][i];

        int right = nums.length - 1 - (i - left); // how many taken from right
        int pickLeft  = nums[left] * mult[i] + dfs(left + 1, i + 1, nums, mult, memo);
        int pickRight = nums[right] * mult[i] + dfs(left, i + 1, nums, mult, memo);

        return memo[left][i] = Math.max(pickLeft, pickRight);
    }
}
