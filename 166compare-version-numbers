import java.util.HashMap;

public class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        // Handle the case where the result is zero
        if (numerator == 0) {
            return "0";
        }

        // Determine the sign of the result
        StringBuilder result = new StringBuilder();
        if ((numerator < 0) ^ (denominator < 0)) {
            result.append("-");
        }

        // Work with positive numbers for simplicity
        long num = Math.abs((long) numerator);
        long den = Math.abs((long) denominator);

        // Append the integer part of the division
        result.append(num / den);
        long remainder = num % den;

        // If there's no remainder, we are done
        if (remainder == 0) {
            return result.toString();
        }

        // Otherwise, handle the fractional part
        result.append(".");

        // HashMap to store remainders and their positions in the result
        HashMap<Long, Integer> remainderMap = new HashMap<>();

        // Continue the long division process
        while (remainder != 0) {
            // If we have seen this remainder before, we have a repeating decimal
            if (remainderMap.containsKey(remainder)) {
                int position = remainderMap.get(remainder);
                result.insert(position, "(");
                result.append(")");
                return result.toString();
            }

            // Store the position of this remainder
            remainderMap.put(remainder, result.length());

            // Multiply the remainder by 10 and perform the division
            remainder *= 10;
            result.append(remainder / den);

            // Update the remainder
            remainder = remainder % den;
        }

        return result.toString();
    }
}
