import java.util.*;

class Solution {
    public int minFlips(int[][] mat) {
        int rows = mat.length;
        int cols = mat[0].length;

        int start = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                start = (start << 1) | mat[i][j];
            }
        }

        if (start == 0) return 0;

        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> seen = new HashSet<>();
        queue.offer(start);
        seen.add(start);

        int steps = 0;

        int[] directions = {0, 1, 0, -1, 0}; // for neighbors

        while (!queue.isEmpty()) {
            int size = queue.size();
            steps++;
            for (int s = 0; s < size; s++) {
                int curr = queue.poll();

                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        int next = flip(curr, i, j, rows, cols, directions);
                        if (next == 0) return steps;
                        if (!seen.contains(next)) {
                            seen.add(next);
                            queue.offer(next);
                        }
                    }
                }
            }
        }

        return -1;
    }

    private int flip(int state, int r, int c, int rows, int cols, int[] directions) {
        int bitIndex = r * cols + c;
        // Flip the cell itself
        state ^= (1 << (rows * cols - 1 - bitIndex));

        // Flip neighbors
        for (int d = 0; d < 4; d++) {
            int nr = r + directions[d];
            int nc = c + directions[d + 1];
            if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {
                int nbitIndex = nr * cols + nc;
                state ^= (1 << (rows * cols - 1 - nbitIndex));
            }
        }

        return state;
    }
}
