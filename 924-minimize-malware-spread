import java.util.*;

class Solution {
    int[] parent;
    int[] size;

    // Union-Find find function
    private int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }

    // Union-Find union function
    private void union(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX == rootY) return;

        if (size[rootX] < size[rootY]) {
            parent[rootX] = rootY;
            size[rootY] += size[rootX];
        } else {
            parent[rootY] = rootX;
            size[rootX] += size[rootY];
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }

        // Build union-find
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    union(i, j);
                }
            }
        }

        // Count how many initial nodes in each component
        int[] infectedCount = new int[n];
        for (int node : initial) {
            int root = find(node);
            infectedCount[root]++;
        }

        Arrays.sort(initial); // in case of tie, return smallest index
        int result = initial[0];
        int maxSaved = -1;

        for (int node : initial) {
            int root = find(node);
            if (infectedCount[root] == 1) {
                int saved = size[root];
                if (saved > maxSaved) {
                    maxSaved = saved;
                    result = node;
                }
            }
        }

        return result;
    }
}
