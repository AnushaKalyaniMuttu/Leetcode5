import java.util.*;

public class Solution {
    public int minAreaRect(int[][] points) {
        int minArea = Integer.MAX_VALUE;
        Map<Integer, Set<Integer>> pointMap = new HashMap<>();

        // Step 1: Store points in a hash map
        for (int[] point : points) {
            pointMap.putIfAbsent(point[0], new HashSet<>());
            pointMap.get(point[0]).add(point[1]);
        }

        // Step 2: Iterate over pairs of points
        for (int i = 0; i < points.length; i++) {
            for (int j = i + 1; j < points.length; j++) {
                int[] p1 = points[i];
                int[] p2 = points[j];

                // Skip if points are on the same x or y coordinate
                if (p1[0] == p2[0] || p1[1] == p2[1]) continue;

                // Step 3: Check for opposite corners
                if (pointMap.get(p1[0]).contains(p2[1]) && pointMap.get(p2[0]).contains(p1[1])) {
                    int area = Math.abs(p1[0] - p2[0]) * Math.abs(p1[1] - p2[1]);
                    minArea = Math.min(minArea, area);
                }
            }
        }

        // Step 4: Return the minimum area
        return minArea == Integer.MAX_VALUE ? 0 : minArea;
    }
}
