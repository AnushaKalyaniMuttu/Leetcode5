class Solution {
    public int[] avoidFlood(int[] rains) {
        int n = rains.length;
        int[] ans = new int[n];
        Arrays.fill(ans, -1);

        Map<Integer, Integer> lastRain = new HashMap<>();
        TreeSet<Integer> sunnyDays = new TreeSet<>();

        for (int i = 0; i < n; i++) {
            int lake = rains[i];
            if (lake > 0) {
                if (lastRain.containsKey(lake)) {
                    Integer dryDay = sunnyDays.higher(lastRain.get(lake));
                    if (dryDay == null) {
                        return new int[0];  // Flood is inevitable
                    }
                    ans[dryDay] = lake;
                    sunnyDays.remove(dryDay);
                }
                lastRain.put(lake, i);
            } else {
                sunnyDays.add(i);
            }
        }

        for (int day : sunnyDays) {
            ans[day] = 1;  // or any arbitrary lake, since it's just filler
        }
        return ans;
    }
}
